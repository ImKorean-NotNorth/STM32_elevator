
elevator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005740  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080058e0  080058e0  000068e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a0  080059a0  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a8  080059a8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a8  080059a8  000069a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059ac  080059ac  000069ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080059b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000060  08005a10  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08005a10  00007348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001181f  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a06  00000000  00000000  000188af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca9  00000000  00000000  0001c2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dc4  00000000  00000000  0001cf81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f01  00000000  00000000  00033d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f253  00000000  00000000  00048c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7e99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004858  00000000  00000000  000d7edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000dc734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058c8 	.word	0x080058c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080058c8 	.word	0x080058c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <LCD_Command>:

extern I2C_HandleTypeDef hi2c1;


void LCD_Command(uint8_t command)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]

  uint8_t high_nibble, low_nibble;
  uint8_t i2c_buffer[4];
  high_nibble = command & 0xf0;
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f023 030f 	bic.w	r3, r3, #15
 8000580:	73fb      	strb	r3, [r7, #15]
  low_nibble = (command << 4) & 0xf0;
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	73bb      	strb	r3, [r7, #14]
  i2c_buffer[0] = high_nibble | 0x04 | 0x08;
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	f043 030c 	orr.w	r3, r3, #12
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
  i2c_buffer[1] = high_nibble | 0x00 | 0x08;
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]

  i2c_buffer[2] = low_nibble  | 0x04 | 0x08;
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72bb      	strb	r3, [r7, #10]
  i2c_buffer[3] = low_nibble  | 0x00 | 0x08;
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	72fb      	strb	r3, [r7, #11]

  while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer, 4, 100) != HAL_OK);
 80005b0:	bf00      	nop
 80005b2:	f107 0208 	add.w	r2, r7, #8
 80005b6:	2364      	movs	r3, #100	@ 0x64
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2304      	movs	r3, #4
 80005bc:	214e      	movs	r1, #78	@ 0x4e
 80005be:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <LCD_Command+0x64>)
 80005c0:	f001 fd88 	bl	80020d4 <HAL_I2C_Master_Transmit>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f3      	bne.n	80005b2 <LCD_Command+0x42>

}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000007c 	.word	0x2000007c

080005d8 <LCD_Data>:


//1byte write
void LCD_Data(uint8_t data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af02      	add	r7, sp, #8
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]

  uint8_t high_nibble, low_nibble;
  uint8_t i2c_buffer[4];
  high_nibble = data & 0xf0;
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f023 030f 	bic.w	r3, r3, #15
 80005e8:	73fb      	strb	r3, [r7, #15]
  low_nibble = (data << 4) & 0xf0;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	73bb      	strb	r3, [r7, #14]
  i2c_buffer[0] = high_nibble | 0x05 | 0x08;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	f043 030d 	orr.w	r3, r3, #13
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	723b      	strb	r3, [r7, #8]
  i2c_buffer[1] = high_nibble | 0x01 | 0x08;
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	f043 0309 	orr.w	r3, r3, #9
 8000600:	b2db      	uxtb	r3, r3
 8000602:	727b      	strb	r3, [r7, #9]

  i2c_buffer[2] = low_nibble  | 0x05 | 0x08;
 8000604:	7bbb      	ldrb	r3, [r7, #14]
 8000606:	f043 030d 	orr.w	r3, r3, #13
 800060a:	b2db      	uxtb	r3, r3
 800060c:	72bb      	strb	r3, [r7, #10]
  i2c_buffer[3] = low_nibble  | 0x01 | 0x08;
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	f043 0309 	orr.w	r3, r3, #9
 8000614:	b2db      	uxtb	r3, r3
 8000616:	72fb      	strb	r3, [r7, #11]

  while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer, 4, 100) != HAL_OK);
 8000618:	bf00      	nop
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	2364      	movs	r3, #100	@ 0x64
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2304      	movs	r3, #4
 8000624:	214e      	movs	r1, #78	@ 0x4e
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <LCD_Data+0x64>)
 8000628:	f001 fd54 	bl	80020d4 <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f3      	bne.n	800061a <LCD_Data+0x42>

}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000007c 	.word	0x2000007c

08000640 <LCD_Init>:


void LCD_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8000644:	2032      	movs	r0, #50	@ 0x32
 8000646:	f001 f839 	bl	80016bc <HAL_Delay>
  LCD_Command(0x33);
 800064a:	2033      	movs	r0, #51	@ 0x33
 800064c:	f7ff ff90 	bl	8000570 <LCD_Command>
  HAL_Delay(5);
 8000650:	2005      	movs	r0, #5
 8000652:	f001 f833 	bl	80016bc <HAL_Delay>
  LCD_Command(0x32);
 8000656:	2032      	movs	r0, #50	@ 0x32
 8000658:	f7ff ff8a 	bl	8000570 <LCD_Command>
  HAL_Delay(5);
 800065c:	2005      	movs	r0, #5
 800065e:	f001 f82d 	bl	80016bc <HAL_Delay>
  LCD_Command(0x28);
 8000662:	2028      	movs	r0, #40	@ 0x28
 8000664:	f7ff ff84 	bl	8000570 <LCD_Command>
  HAL_Delay(5);
 8000668:	2005      	movs	r0, #5
 800066a:	f001 f827 	bl	80016bc <HAL_Delay>
  LCD_Command(DISPLAY_ON);
 800066e:	200c      	movs	r0, #12
 8000670:	f7ff ff7e 	bl	8000570 <LCD_Command>
  HAL_Delay(5);
 8000674:	2005      	movs	r0, #5
 8000676:	f001 f821 	bl	80016bc <HAL_Delay>
  LCD_Command(0x06);
 800067a:	2006      	movs	r0, #6
 800067c:	f7ff ff78 	bl	8000570 <LCD_Command>
  HAL_Delay(5);
 8000680:	2005      	movs	r0, #5
 8000682:	f001 f81b 	bl	80016bc <HAL_Delay>
  LCD_Command(CLEAR_DISPLAY);
 8000686:	2001      	movs	r0, #1
 8000688:	f7ff ff72 	bl	8000570 <LCD_Command>
  HAL_Delay(2);
 800068c:	2002      	movs	r0, #2
 800068e:	f001 f815 	bl	80016bc <HAL_Delay>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}

08000696 <LCD_String>:


void LCD_String(char *str)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
  while(*str)LCD_Data(*str++);
 800069e:	e006      	b.n	80006ae <LCD_String+0x18>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	607a      	str	r2, [r7, #4]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff95 	bl	80005d8 <LCD_Data>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1f4      	bne.n	80006a0 <LCD_String+0xa>
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <moveCusor>:


void moveCusor(uint8_t row, uint8_t col)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	460a      	mov	r2, r1
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	4613      	mov	r3, r2
 80006ce:	71bb      	strb	r3, [r7, #6]
  LCD_Command(0x80 | row<<6 | col);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	019b      	lsls	r3, r3, #6
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	4313      	orrs	r3, r2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff44 	bl	8000570 <LCD_Command>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b66      	ldr	r3, [pc, #408]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a65      	ldr	r2, [pc, #404]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b63      	ldr	r3, [pc, #396]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b5f      	ldr	r3, [pc, #380]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a5e      	ldr	r2, [pc, #376]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b5c      	ldr	r3, [pc, #368]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b58      	ldr	r3, [pc, #352]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a57      	ldr	r2, [pc, #348]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b55      	ldr	r3, [pc, #340]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b51      	ldr	r3, [pc, #324]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a50      	ldr	r2, [pc, #320]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b4e      	ldr	r3, [pc, #312]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b4a      	ldr	r3, [pc, #296]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a49      	ldr	r2, [pc, #292]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b47      	ldr	r3, [pc, #284]	@ (80008a4 <MX_GPIO_Init+0x1b4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000798:	4843      	ldr	r0, [pc, #268]	@ (80008a8 <MX_GPIO_Init+0x1b8>)
 800079a:	f001 fb25 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800079e:	2200      	movs	r2, #0
 80007a0:	f24e 010a 	movw	r1, #57354	@ 0xe00a
 80007a4:	4841      	ldr	r0, [pc, #260]	@ (80008ac <MX_GPIO_Init+0x1bc>)
 80007a6:	f001 fb1f 	bl	8001de8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80007aa:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4839      	ldr	r0, [pc, #228]	@ (80008a8 <MX_GPIO_Init+0x1b8>)
 80007c4:	f001 f974 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007c8:	2380      	movs	r3, #128	@ 0x80
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007cc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4832      	ldr	r0, [pc, #200]	@ (80008a8 <MX_GPIO_Init+0x1b8>)
 80007de:	f001 f967 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80007e2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	482e      	ldr	r0, [pc, #184]	@ (80008b0 <MX_GPIO_Init+0x1c0>)
 80007f8:	f001 f95a 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007fc:	f24e 0302 	movw	r3, #57346	@ 0xe002
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080a:	2302      	movs	r3, #2
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4825      	ldr	r0, [pc, #148]	@ (80008ac <MX_GPIO_Init+0x1bc>)
 8000816:	f001 f94b 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800081a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000820:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	481f      	ldr	r0, [pc, #124]	@ (80008b0 <MX_GPIO_Init+0x1c0>)
 8000832:	f001 f93d 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000836:	2304      	movs	r3, #4
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800083a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	481a      	ldr	r0, [pc, #104]	@ (80008b4 <MX_GPIO_Init+0x1c4>)
 800084c:	f001 f930 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000850:	2308      	movs	r3, #8
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4811      	ldr	r0, [pc, #68]	@ (80008ac <MX_GPIO_Init+0x1bc>)
 8000868:	f001 f922 	bl	8001ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2008      	movs	r0, #8
 8000872:	f001 f846 	bl	8001902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000876:	2008      	movs	r0, #8
 8000878:	f001 f85f 	bl	800193a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2017      	movs	r0, #23
 8000882:	f001 f83e 	bl	8001902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000886:	2017      	movs	r0, #23
 8000888:	f001 f857 	bl	800193a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2028      	movs	r0, #40	@ 0x28
 8000892:	f001 f836 	bl	8001902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000896:	2028      	movs	r0, #40	@ 0x28
 8000898:	f001 f84f 	bl	800193a <HAL_NVIC_EnableIRQ>

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	@ 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020400 	.word	0x40020400
 80008b0:	40020800 	.word	0x40020800
 80008b4:	40020c00 	.word	0x40020c00

080008b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008be:	4a13      	ldr	r2, [pc, #76]	@ (800090c <MX_I2C1_Init+0x54>)
 80008c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008c4:	4a12      	ldr	r2, [pc, #72]	@ (8000910 <MX_I2C1_Init+0x58>)
 80008c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008f6:	f001 faa9 	bl	8001e4c <HAL_I2C_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000900:	f000 fa86 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000007c 	.word	0x2000007c
 800090c:	40005400 	.word	0x40005400
 8000910:	000186a0 	.word	0x000186a0

08000914 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a19      	ldr	r2, [pc, #100]	@ (8000998 <HAL_I2C_MspInit+0x84>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d12b      	bne.n	800098e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b18      	ldr	r3, [pc, #96]	@ (800099c <HAL_I2C_MspInit+0x88>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a17      	ldr	r2, [pc, #92]	@ (800099c <HAL_I2C_MspInit+0x88>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <HAL_I2C_MspInit+0x88>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000952:	23c0      	movs	r3, #192	@ 0xc0
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000956:	2312      	movs	r3, #18
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000962:	2304      	movs	r3, #4
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <HAL_I2C_MspInit+0x8c>)
 800096e:	f001 f89f 	bl	8001ab0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <HAL_I2C_MspInit+0x88>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	4a08      	ldr	r2, [pc, #32]	@ (800099c <HAL_I2C_MspInit+0x88>)
 800097c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000980:	6413      	str	r3, [r2, #64]	@ 0x40
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_I2C_MspInit+0x88>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	@ 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40005400 	.word	0x40005400
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400

080009a4 <HAL_GPIO_EXTI_Callback>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]

  uint8_t arrive_flag = 0;//도착 확인용 flag
 80009ae:	2300      	movs	r3, #0
 80009b0:	73fb      	strb	r3, [r7, #15]
  uint16_t pin_num = GPIO_Pin;//핀 번호 저장할 임시 변수
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	81bb      	strh	r3, [r7, #12]
  //가장 빠른 번호 exti가 실행될때 문제 인듯
  //exti1 을 끌고와서 테스트 해보기



  switch(pin_num)
 80009b6:	89bb      	ldrh	r3, [r7, #12]
 80009b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80009bc:	d007      	beq.n	80009ce <HAL_GPIO_EXTI_Callback+0x2a>
 80009be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80009c2:	dc22      	bgt.n	8000a0a <HAL_GPIO_EXTI_Callback+0x66>
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d00c      	beq.n	80009e2 <HAL_GPIO_EXTI_Callback+0x3e>
 80009c8:	2b80      	cmp	r3, #128	@ 0x80
 80009ca:	d014      	beq.n	80009f6 <HAL_GPIO_EXTI_Callback+0x52>
 80009cc:	e01d      	b.n	8000a0a <HAL_GPIO_EXTI_Callback+0x66>
  {

    case GPIO_PIN_12://3층

      //해당 층에 도착했으면
      if(start_floor_num == 3)
 80009ce:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <HAL_GPIO_EXTI_Callback+0x98>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d101      	bne.n	80009da <HAL_GPIO_EXTI_Callback+0x36>
      {
        arrive_flag = 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]

      }
      //해당 층에 거쳐가면 층수 변경
      move_msg = 3;
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x9c>)
 80009dc:	2203      	movs	r2, #3
 80009de:	701a      	strb	r2, [r3, #0]
      break;
 80009e0:	e013      	b.n	8000a0a <HAL_GPIO_EXTI_Callback+0x66>


    case GPIO_PIN_2://2층

      //해당 층에 도착했으면
      if(start_floor_num == 2)
 80009e2:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <HAL_GPIO_EXTI_Callback+0x98>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d101      	bne.n	80009ee <HAL_GPIO_EXTI_Callback+0x4a>
      {
        arrive_flag = 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]

      }
      //해당 층에 거쳐가면 층수 변경
      move_msg = 2;
 80009ee:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x9c>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	701a      	strb	r2, [r3, #0]
      break;
 80009f4:	e009      	b.n	8000a0a <HAL_GPIO_EXTI_Callback+0x66>


    case GPIO_PIN_7://1층

      //해당 층에 도착했으면
      if(start_floor_num == 1)
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <HAL_GPIO_EXTI_Callback+0x98>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d101      	bne.n	8000a02 <HAL_GPIO_EXTI_Callback+0x5e>
      {
        arrive_flag = 1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]

      }
      //해당 층에 거쳐가면 층수 변경
      move_msg = 1;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
      break;
 8000a08:	bf00      	nop
  }




  if(arrive_flag == 1)
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d111      	bne.n	8000a34 <HAL_GPIO_EXTI_Callback+0x90>
  {
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);//pd2끄기
 8000a10:	2008      	movs	r0, #8
 8000a12:	f000 ffa0 	bl	8001956 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);//pc12끄기
 8000a16:	2028      	movs	r0, #40	@ 0x28
 8000a18:	f000 ff9d 	bl	8001956 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);//pa7끄기
 8000a1c:	2017      	movs	r0, #23
 8000a1e:	f000 ff9a 	bl	8001956 <HAL_NVIC_DisableIRQ>



    moter_move_i=0;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	801a      	strh	r2, [r3, #0]
    arrive_msg = 1;
 8000a28:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(&htim11);
 8000a2e:	4807      	ldr	r0, [pc, #28]	@ (8000a4c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a30:	f002 fbf4 	bl	800321c <HAL_TIM_Base_Stop_IT>
  }


}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	200000d1 	.word	0x200000d1
 8000a44:	200000d6 	.word	0x200000d6
 8000a48:	200000d0 	.word	0x200000d0
 8000a4c:	2000016c 	.word	0x2000016c

08000a50 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM11)//모터 회전하라는 타이머 플레그가 세워지면
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a15      	ldr	r2, [pc, #84]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d104      	bne.n	8000a6c <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    Tim11_moter_move(moter_turn);//모터 한번 움직임
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fa10 	bl	8000e8c <Tim11_moter_move>
  }

  if(htim->Instance == TIM10)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d119      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x5a>
  {

    if(SB_moter_set == 0)
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d107      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x3e>
    {

    TIM2->CCR1 = 150; // 서보모터 중앙
 8000a7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a82:	2296      	movs	r2, #150	@ 0x96
 8000a84:	635a      	str	r2, [r3, #52]	@ 0x34
    SB_moter_set=1;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
    SB_moter_set=0;
    }
  }


}
 8000a8c:	e00d      	b.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x5a>
    TIM2->CCR1 = 50; // 서보모터 -90
 8000a8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a92:	2232      	movs	r2, #50	@ 0x32
 8000a94:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COUNTER(&htim10, 0);
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Stop_IT(&htim10);
 8000a9e:	4809      	ldr	r0, [pc, #36]	@ (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000aa0:	f002 fbbc 	bl	800321c <HAL_TIM_Base_Stop_IT>
    SB_moter_set=0;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40014800 	.word	0x40014800
 8000ab8:	200000d3 	.word	0x200000d3
 8000abc:	40014400 	.word	0x40014400
 8000ac0:	200000d5 	.word	0x200000d5
 8000ac4:	20000124 	.word	0x20000124

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ace:	f000 fd83 	bl	80015d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad2:	f000 f935 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad6:	f7ff fe0b 	bl	80006f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ada:	f000 fcd9 	bl	8001490 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000ade:	f000 fb9f 	bl	8001220 <MX_TIM11_Init>
  MX_I2C1_Init();
 8000ae2:	f7ff fee9 	bl	80008b8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ae6:	f000 fad7 	bl	8001098 <MX_TIM2_Init>
  MX_TIM10_Init();
 8000aea:	f000 fb4b 	bl	8001184 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */


  //서보모터 pwm 활성화
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000aee:	2100      	movs	r1, #0
 8000af0:	4881      	ldr	r0, [pc, #516]	@ (8000cf8 <main+0x230>)
 8000af2:	f002 fc1b 	bl	800332c <HAL_TIM_PWM_Start>


  //서보모터 딜레이 계산용 10번 타이머 활성화(시스템 딜레이 방지용 타이머)
  HAL_TIM_PWM_Stop(&htim10, TIM_CHANNEL_1);
 8000af6:	2100      	movs	r1, #0
 8000af8:	4880      	ldr	r0, [pc, #512]	@ (8000cfc <main+0x234>)
 8000afa:	f002 fcc7 	bl	800348c <HAL_TIM_PWM_Stop>


  //스탭모터 딜레이 계산용 11번 타이머 활성화(시스템 딜레이 방지용 타이머)
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8000afe:	2100      	movs	r1, #0
 8000b00:	487f      	ldr	r0, [pc, #508]	@ (8000d00 <main+0x238>)
 8000b02:	f002 fc13 	bl	800332c <HAL_TIM_PWM_Start>





  LCD_Init();
 8000b06:	f7ff fd9b 	bl	8000640 <LCD_Init>


  moveCusor(0, 0);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff fdd7 	bl	80006c0 <moveCusor>
  LCD_String("DH elevator");
 8000b12:	487c      	ldr	r0, [pc, #496]	@ (8000d04 <main+0x23c>)
 8000b14:	f7ff fdbf 	bl	8000696 <LCD_String>
  moveCusor(1, 0);
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fdd0 	bl	80006c0 <moveCusor>
  LCD_String("Press The Button");
 8000b20:	4879      	ldr	r0, [pc, #484]	@ (8000d08 <main+0x240>)
 8000b22:	f7ff fdb8 	bl	8000696 <LCD_String>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2108      	movs	r1, #8
 8000b2a:	4878      	ldr	r0, [pc, #480]	@ (8000d0c <main+0x244>)
 8000b2c:	f001 f95c 	bl	8001de8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b36:	4876      	ldr	r0, [pc, #472]	@ (8000d10 <main+0x248>)
 8000b38:	f001 f956 	bl	8001de8 <HAL_GPIO_WritePin>


  //문 초기값 닫힘
  TIM2->CCR1 = 50; // 서보모터 -90
 8000b3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b40:	2232      	movs	r2, #50	@ 0x32
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34
  /* USER CODE BEGIN WHILE */
  while (1)
  {


    next_floor_num = 0; //이동 층수 초기화
 8000b44:	4b73      	ldr	r3, [pc, #460]	@ (8000d14 <main+0x24c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]



    if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8))//3층
 8000b4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b4e:	4872      	ldr	r0, [pc, #456]	@ (8000d18 <main+0x250>)
 8000b50:	f001 f932 	bl	8001db8 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10e      	bne.n	8000b78 <main+0xb0>
    {


      next_floor_num = 3; //이동 층수 저장
 8000b5a:	4b6e      	ldr	r3, [pc, #440]	@ (8000d14 <main+0x24c>)
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	701a      	strb	r2, [r3, #0]

      if(start_floor_num != next_floor_num)
 8000b60:	4b6e      	ldr	r3, [pc, #440]	@ (8000d1c <main+0x254>)
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	4b6b      	ldr	r3, [pc, #428]	@ (8000d14 <main+0x24c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d005      	beq.n	8000b78 <main+0xb0>


        //현재 층수 메세지 출력
        //move_msg = 3;

        moter_turn = UP; //시계
 8000b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8000d20 <main+0x258>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
        moving_elv = 1;
 8000b72:	4b6c      	ldr	r3, [pc, #432]	@ (8000d24 <main+0x25c>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]


    }


    if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6))//2층
 8000b78:	2140      	movs	r1, #64	@ 0x40
 8000b7a:	4867      	ldr	r0, [pc, #412]	@ (8000d18 <main+0x250>)
 8000b7c:	f001 f91c 	bl	8001db8 <HAL_GPIO_ReadPin>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d11a      	bne.n	8000bbc <main+0xf4>
    {



      next_floor_num = 2; //이동 층수 저장
 8000b86:	4b63      	ldr	r3, [pc, #396]	@ (8000d14 <main+0x24c>)
 8000b88:	2202      	movs	r2, #2
 8000b8a:	701a      	strb	r2, [r3, #0]

      if(start_floor_num != next_floor_num)
 8000b8c:	4b63      	ldr	r3, [pc, #396]	@ (8000d1c <main+0x254>)
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	4b60      	ldr	r3, [pc, #384]	@ (8000d14 <main+0x24c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d011      	beq.n	8000bbc <main+0xf4>


        //move_msg = 2;


        if (start_floor_num > 2) // 현재 층이 2층보다 높으면 내려감
 8000b98:	4b60      	ldr	r3, [pc, #384]	@ (8000d1c <main+0x254>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d903      	bls.n	8000ba8 <main+0xe0>
        {
          moter_turn = DOWN;
 8000ba0:	4b5f      	ldr	r3, [pc, #380]	@ (8000d20 <main+0x258>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e006      	b.n	8000bb6 <main+0xee>
        }
        else if (start_floor_num <= 2) // 현재 층이 2층보다 낮으면 올라감
 8000ba8:	4b5c      	ldr	r3, [pc, #368]	@ (8000d1c <main+0x254>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d802      	bhi.n	8000bb6 <main+0xee>
        {
          moter_turn = UP;
 8000bb0:	4b5b      	ldr	r3, [pc, #364]	@ (8000d20 <main+0x258>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
        }

        moving_elv = 1;
 8000bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8000d24 <main+0x25c>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]


    }


    if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5))//1층
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	4856      	ldr	r0, [pc, #344]	@ (8000d18 <main+0x250>)
 8000bc0:	f001 f8fa 	bl	8001db8 <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10e      	bne.n	8000be8 <main+0x120>
    {

      next_floor_num = 1; //이동 층수 저장
 8000bca:	4b52      	ldr	r3, [pc, #328]	@ (8000d14 <main+0x24c>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]

      if(start_floor_num != next_floor_num)
 8000bd0:	4b52      	ldr	r3, [pc, #328]	@ (8000d1c <main+0x254>)
 8000bd2:	781a      	ldrb	r2, [r3, #0]
 8000bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8000d14 <main+0x24c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d005      	beq.n	8000be8 <main+0x120>
      {

        //move_msg = 1;

        moter_turn = DOWN; //반시계
 8000bdc:	4b50      	ldr	r3, [pc, #320]	@ (8000d20 <main+0x258>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
        moving_elv = 1;
 8000be2:	4b50      	ldr	r3, [pc, #320]	@ (8000d24 <main+0x25c>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]





    if(moving_elv==1)
 8000be8:	4b4e      	ldr	r3, [pc, #312]	@ (8000d24 <main+0x25c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d137      	bne.n	8000c60 <main+0x198>
    {
      start_floor_num = next_floor_num; //현재 층수를 이동층수로 갱신
 8000bf0:	4b48      	ldr	r3, [pc, #288]	@ (8000d14 <main+0x24c>)
 8000bf2:	781a      	ldrb	r2, [r3, #0]
 8000bf4:	4b49      	ldr	r3, [pc, #292]	@ (8000d1c <main+0x254>)
 8000bf6:	701a      	strb	r2, [r3, #0]

      HAL_NVIC_EnableIRQ(EXTI2_IRQn);//pd2키기
 8000bf8:	2008      	movs	r0, #8
 8000bfa:	f000 fe9e 	bl	800193a <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);//pc12키기
 8000bfe:	2028      	movs	r0, #40	@ 0x28
 8000c00:	f000 fe9b 	bl	800193a <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//pa7키기
 8000c04:	2017      	movs	r0, #23
 8000c06:	f000 fe98 	bl	800193a <HAL_NVIC_EnableIRQ>





      moveCusor(1, 0);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff fd57 	bl	80006c0 <moveCusor>
      LCD_String("                   "); // 기존 내용 지우기
 8000c12:	4845      	ldr	r0, [pc, #276]	@ (8000d28 <main+0x260>)
 8000c14:	f7ff fd3f 	bl	8000696 <LCD_String>
      moveCusor(1, 0);
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff fd50 	bl	80006c0 <moveCusor>
      char buffer[20]; // 충분히 큰 크기의 버퍼 (최대 20자)
      sprintf(buffer, "Go to the %dF...", start_floor_num);
 8000c20:	4b3e      	ldr	r3, [pc, #248]	@ (8000d1c <main+0x254>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4940      	ldr	r1, [pc, #256]	@ (8000d2c <main+0x264>)
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f004 f9ac 	bl	8004f88 <siprintf>
      LCD_String(buffer); // 동적으로 생성된 문자열 출력
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fd2f 	bl	8000696 <LCD_String>


      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	4833      	ldr	r0, [pc, #204]	@ (8000d0c <main+0x244>)
 8000c3e:	f001 f8d3 	bl	8001de8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c48:	4831      	ldr	r0, [pc, #196]	@ (8000d10 <main+0x248>)
 8000c4a:	f001 f8cd 	bl	8001de8 <HAL_GPIO_WritePin>


      SB_moter_set = 1;//서보모터
 8000c4e:	4b38      	ldr	r3, [pc, #224]	@ (8000d30 <main+0x268>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
      //__HAL_TIM_SET_COUNTER(&htim10, 0);
      HAL_TIM_Base_Start_IT(&htim11);
 8000c54:	482a      	ldr	r0, [pc, #168]	@ (8000d00 <main+0x238>)
 8000c56:	f002 fa7f 	bl	8003158 <HAL_TIM_Base_Start_IT>
      moving_elv = 0;
 8000c5a:	4b32      	ldr	r3, [pc, #200]	@ (8000d24 <main+0x25c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]




    //내가 가고 싶은 층수에 도착 했다면
    if(arrive_msg != 0)
 8000c60:	4b34      	ldr	r3, [pc, #208]	@ (8000d34 <main+0x26c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d027      	beq.n	8000cb8 <main+0x1f0>
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);//인터럽트 체크용 led
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	4828      	ldr	r0, [pc, #160]	@ (8000d10 <main+0x248>)
 8000c6e:	f001 f8bb 	bl	8001de8 <HAL_GPIO_WritePin>

      //TIM2->CCR1 = 150; // 서보모터 -90
      SB_moter_set = 0;
 8000c72:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <main+0x268>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
      //__HAL_TIM_SET_COUNTER(&htim10, 0);
      HAL_TIM_Base_Start_IT(&htim10);
 8000c78:	4820      	ldr	r0, [pc, #128]	@ (8000cfc <main+0x234>)
 8000c7a:	f002 fa6d 	bl	8003158 <HAL_TIM_Base_Start_IT>


      //도착 메세지 출력
      moveCusor(1, 0);
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2001      	movs	r0, #1
 8000c82:	f7ff fd1d 	bl	80006c0 <moveCusor>
      LCD_String("                   ");
 8000c86:	4828      	ldr	r0, [pc, #160]	@ (8000d28 <main+0x260>)
 8000c88:	f7ff fd05 	bl	8000696 <LCD_String>
      moveCusor(1, 0);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff fd16 	bl	80006c0 <moveCusor>
      LCD_String("Arrive !!");
 8000c94:	4828      	ldr	r0, [pc, #160]	@ (8000d38 <main+0x270>)
 8000c96:	f7ff fcfe 	bl	8000696 <LCD_String>
      arrive_msg = 0;
 8000c9a:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <main+0x26c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]



      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	4819      	ldr	r0, [pc, #100]	@ (8000d0c <main+0x244>)
 8000ca6:	f001 f89f 	bl	8001de8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cb0:	4817      	ldr	r0, [pc, #92]	@ (8000d10 <main+0x248>)
 8000cb2:	f001 f899 	bl	8001de8 <HAL_GPIO_WritePin>
 8000cb6:	e004      	b.n	8000cc2 <main+0x1fa>

    }
    else
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);//인터럽트 체크용 led
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2120      	movs	r1, #32
 8000cbc:	4814      	ldr	r0, [pc, #80]	@ (8000d10 <main+0x248>)
 8000cbe:	f001 f893 	bl	8001de8 <HAL_GPIO_WritePin>
    }


    //층수가 이동 되었을 때
    if(move_msg != 0)
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <main+0x274>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f43f af3c 	beq.w	8000b44 <main+0x7c>
    {
      //LCD에 층수 표시
      moveCusor(0, 0);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff fcf6 	bl	80006c0 <moveCusor>
      LCD_String("                   ");
 8000cd4:	4814      	ldr	r0, [pc, #80]	@ (8000d28 <main+0x260>)
 8000cd6:	f7ff fcde 	bl	8000696 <LCD_String>
      moveCusor(0, 0);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fcef 	bl	80006c0 <moveCusor>
      LCD_Data('0' + move_msg); // uint8_t 값을 바로 문자로 변환하여 출력
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <main+0x274>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	3330      	adds	r3, #48	@ 0x30
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fc75 	bl	80005d8 <LCD_Data>
      move_msg = 0;
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <main+0x274>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
    next_floor_num = 0; //이동 층수 초기화
 8000cf4:	e726      	b.n	8000b44 <main+0x7c>
 8000cf6:	bf00      	nop
 8000cf8:	200000dc 	.word	0x200000dc
 8000cfc:	20000124 	.word	0x20000124
 8000d00:	2000016c 	.word	0x2000016c
 8000d04:	080058e0 	.word	0x080058e0
 8000d08:	080058ec 	.word	0x080058ec
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	40020000 	.word	0x40020000
 8000d14:	200000d4 	.word	0x200000d4
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	200000d3 	.word	0x200000d3
 8000d24:	200000d2 	.word	0x200000d2
 8000d28:	08005900 	.word	0x08005900
 8000d2c:	08005914 	.word	0x08005914
 8000d30:	200000d5 	.word	0x200000d5
 8000d34:	200000d0 	.word	0x200000d0
 8000d38:	08005928 	.word	0x08005928
 8000d3c:	200000d1 	.word	0x200000d1

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b094      	sub	sp, #80	@ 0x50
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	2230      	movs	r2, #48	@ 0x30
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f004 f93a 	bl	8004fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	4b27      	ldr	r3, [pc, #156]	@ (8000e08 <SystemClock_Config+0xc8>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6c:	4a26      	ldr	r2, [pc, #152]	@ (8000e08 <SystemClock_Config+0xc8>)
 8000d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d74:	4b24      	ldr	r3, [pc, #144]	@ (8000e08 <SystemClock_Config+0xc8>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <SystemClock_Config+0xcc>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a20      	ldr	r2, [pc, #128]	@ (8000e0c <SystemClock_Config+0xcc>)
 8000d8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <SystemClock_Config+0xcc>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da6:	2302      	movs	r3, #2
 8000da8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000daa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000db0:	2304      	movs	r3, #4
 8000db2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000db4:	2364      	movs	r3, #100	@ 0x64
 8000db6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fcdf 	bl	8002788 <HAL_RCC_OscConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dd0:	f000 f81e 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	2103      	movs	r1, #3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 ff41 	bl	8002c78 <HAL_RCC_ClockConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dfc:	f000 f808 	bl	8000e10 <Error_Handler>
  }
}
 8000e00:	bf00      	nop
 8000e02:	3750      	adds	r7, #80	@ 0x50
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40007000 	.word	0x40007000

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <Error_Handler+0x8>

08000e1c <stepMoter>:
uint16_t moter_move_i = 0;



void stepMoter(uint8_t step)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, HALF_STEP_SEQ[step][0]);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	4a16      	ldr	r2, [pc, #88]	@ (8000e84 <stepMoter+0x68>)
 8000e2a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	2102      	movs	r1, #2
 8000e32:	4815      	ldr	r0, [pc, #84]	@ (8000e88 <stepMoter+0x6c>)
 8000e34:	f000 ffd8 	bl	8001de8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, HALF_STEP_SEQ[step][1]);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4a12      	ldr	r2, [pc, #72]	@ (8000e84 <stepMoter+0x68>)
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	785b      	ldrb	r3, [r3, #1]
 8000e42:	461a      	mov	r2, r3
 8000e44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e48:	480f      	ldr	r0, [pc, #60]	@ (8000e88 <stepMoter+0x6c>)
 8000e4a:	f000 ffcd 	bl	8001de8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, HALF_STEP_SEQ[step][2]);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4a0c      	ldr	r2, [pc, #48]	@ (8000e84 <stepMoter+0x68>)
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	789b      	ldrb	r3, [r3, #2]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e5e:	480a      	ldr	r0, [pc, #40]	@ (8000e88 <stepMoter+0x6c>)
 8000e60:	f000 ffc2 	bl	8001de8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, HALF_STEP_SEQ[step][3]);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4a07      	ldr	r2, [pc, #28]	@ (8000e84 <stepMoter+0x68>)
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	78db      	ldrb	r3, [r3, #3]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e74:	4804      	ldr	r0, [pc, #16]	@ (8000e88 <stepMoter+0x6c>)
 8000e76:	f000 ffb7 	bl	8001de8 <HAL_GPIO_WritePin>

}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08005934 	.word	0x08005934
 8000e88:	40020400 	.word	0x40020400

08000e8c <Tim11_moter_move>:
}



void Tim11_moter_move(uint8_t direction)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]

  uint8_t step;

     if(direction == DIR_CW)
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d106      	bne.n	8000eaa <Tim11_moter_move+0x1e>
     {
       step= moter_move_i % 8;
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <Tim11_moter_move+0x4c>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e007      	b.n	8000eba <Tim11_moter_move+0x2e>
     }
     else
     {
       step = 7 - (moter_move_i % 8);
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <Tim11_moter_move+0x4c>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	73fb      	strb	r3, [r7, #15]
     }

     moter_move_i++;
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <Tim11_moter_move+0x4c>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <Tim11_moter_move+0x4c>)
 8000ec4:	801a      	strh	r2, [r3, #0]
     stepMoter(step);
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ffa7 	bl	8000e1c <stepMoter>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000d6 	.word	0x200000d6

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a0f      	ldr	r2, [pc, #60]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	4a08      	ldr	r2, [pc, #32]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <NMI_Handler+0x4>

08000f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <MemManage_Handler+0x4>

08000f44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f82:	f000 fb7b 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000f8e:	2004      	movs	r0, #4
 8000f90:	f000 ff44 	bl	8001e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000f9c:	2080      	movs	r0, #128	@ 0x80
 8000f9e:	f000 ff3d 	bl	8001e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fae:	f002 fad1 	bl	8003554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000124 	.word	0x20000124

08000fbc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000fc2:	f002 fac7 	bl	8003554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000016c 	.word	0x2000016c

08000fd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <TIM2_IRQHandler+0x10>)
 8000fd6:	f002 fabd 	bl	8003554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000dc 	.word	0x200000dc

08000fe4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <USART2_IRQHandler+0x10>)
 8000fea:	f003 f8ff 	bl	80041ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001b4 	.word	0x200001b4

08000ff8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000ffc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001000:	f000 ff0c 	bl	8001e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	@ (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f003 ffce 	bl	8004fd8 <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	@ (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20020000 	.word	0x20020000
 8001068:	00000400 	.word	0x00000400
 800106c:	200000d8 	.word	0x200000d8
 8001070:	20000348 	.word	0x20000348

08001074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08e      	sub	sp, #56	@ 0x38
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	f107 0320 	add.w	r3, r7, #32
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	615a      	str	r2, [r3, #20]
 80010c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001180 <MX_TIM2_Init+0xe8>)
 80010ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 80010d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001180 <MX_TIM2_Init+0xe8>)
 80010d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d8:	4b29      	ldr	r3, [pc, #164]	@ (8001180 <MX_TIM2_Init+0xe8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80010de:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <MX_TIM2_Init+0xe8>)
 80010e0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80010e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e6:	4b26      	ldr	r3, [pc, #152]	@ (8001180 <MX_TIM2_Init+0xe8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ec:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <MX_TIM2_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f2:	4823      	ldr	r0, [pc, #140]	@ (8001180 <MX_TIM2_Init+0xe8>)
 80010f4:	f001 ffe0 	bl	80030b8 <HAL_TIM_Base_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010fe:	f7ff fe87 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001102:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001108:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800110c:	4619      	mov	r1, r3
 800110e:	481c      	ldr	r0, [pc, #112]	@ (8001180 <MX_TIM2_Init+0xe8>)
 8001110:	f002 fbd2 	bl	80038b8 <HAL_TIM_ConfigClockSource>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800111a:	f7ff fe79 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800111e:	4818      	ldr	r0, [pc, #96]	@ (8001180 <MX_TIM2_Init+0xe8>)
 8001120:	f002 f8ab 	bl	800327a <HAL_TIM_PWM_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800112a:	f7ff fe71 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	4619      	mov	r1, r3
 800113c:	4810      	ldr	r0, [pc, #64]	@ (8001180 <MX_TIM2_Init+0xe8>)
 800113e:	f002 ff83 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001148:	f7ff fe62 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800114c:	2360      	movs	r3, #96	@ 0x60
 800114e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	4619      	mov	r1, r3
 8001162:	4807      	ldr	r0, [pc, #28]	@ (8001180 <MX_TIM2_Init+0xe8>)
 8001164:	f002 fae6 	bl	8003734 <HAL_TIM_PWM_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800116e:	f7ff fe4f 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001172:	4803      	ldr	r0, [pc, #12]	@ (8001180 <MX_TIM2_Init+0xe8>)
 8001174:	f000 f904 	bl	8001380 <HAL_TIM_MspPostInit>

}
 8001178:	bf00      	nop
 800117a:	3738      	adds	r7, #56	@ 0x38
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200000dc 	.word	0x200000dc

08001184 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
 8001198:	615a      	str	r2, [r3, #20]
 800119a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800119c:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <MX_TIM10_Init+0x94>)
 800119e:	4a1f      	ldr	r2, [pc, #124]	@ (800121c <MX_TIM10_Init+0x98>)
 80011a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001218 <MX_TIM10_Init+0x94>)
 80011a4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80011a8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <MX_TIM10_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 80011b0:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <MX_TIM10_Init+0x94>)
 80011b2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80011b6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <MX_TIM10_Init+0x94>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011be:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <MX_TIM10_Init+0x94>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80011c4:	4814      	ldr	r0, [pc, #80]	@ (8001218 <MX_TIM10_Init+0x94>)
 80011c6:	f001 ff77 	bl	80030b8 <HAL_TIM_Base_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 80011d0:	f7ff fe1e 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80011d4:	4810      	ldr	r0, [pc, #64]	@ (8001218 <MX_TIM10_Init+0x94>)
 80011d6:	f002 f850 	bl	800327a <HAL_TIM_PWM_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 80011e0:	f7ff fe16 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e4:	2360      	movs	r3, #96	@ 0x60
 80011e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2200      	movs	r2, #0
 80011f8:	4619      	mov	r1, r3
 80011fa:	4807      	ldr	r0, [pc, #28]	@ (8001218 <MX_TIM10_Init+0x94>)
 80011fc:	f002 fa9a 	bl	8003734 <HAL_TIM_PWM_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001206:	f7ff fe03 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800120a:	4803      	ldr	r0, [pc, #12]	@ (8001218 <MX_TIM10_Init+0x94>)
 800120c:	f000 f8b8 	bl	8001380 <HAL_TIM_MspPostInit>

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000124 	.word	0x20000124
 800121c:	40014400 	.word	0x40014400

08001220 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	615a      	str	r2, [r3, #20]
 8001236:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <MX_TIM11_Init+0x94>)
 800123a:	4a1f      	ldr	r2, [pc, #124]	@ (80012b8 <MX_TIM11_Init+0x98>)
 800123c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 800123e:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <MX_TIM11_Init+0x94>)
 8001240:	2253      	movs	r2, #83	@ 0x53
 8001242:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <MX_TIM11_Init+0x94>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <MX_TIM11_Init+0x94>)
 800124c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001250:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <MX_TIM11_Init+0x94>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001258:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <MX_TIM11_Init+0x94>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800125e:	4815      	ldr	r0, [pc, #84]	@ (80012b4 <MX_TIM11_Init+0x94>)
 8001260:	f001 ff2a 	bl	80030b8 <HAL_TIM_Base_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800126a:	f7ff fdd1 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800126e:	4811      	ldr	r0, [pc, #68]	@ (80012b4 <MX_TIM11_Init+0x94>)
 8001270:	f002 f803 	bl	800327a <HAL_TIM_PWM_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800127a:	f7ff fdc9 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127e:	2360      	movs	r3, #96	@ 0x60
 8001280:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	4807      	ldr	r0, [pc, #28]	@ (80012b4 <MX_TIM11_Init+0x94>)
 8001296:	f002 fa4d 	bl	8003734 <HAL_TIM_PWM_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80012a0:	f7ff fdb6 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80012a4:	4803      	ldr	r0, [pc, #12]	@ (80012b4 <MX_TIM11_Init+0x94>)
 80012a6:	f000 f86b 	bl	8001380 <HAL_TIM_MspPostInit>

}
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000016c 	.word	0x2000016c
 80012b8:	40014800 	.word	0x40014800

080012bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012cc:	d116      	bne.n	80012fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <HAL_TIM_Base_MspInit+0xb8>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	4a27      	ldr	r2, [pc, #156]	@ (8001374 <HAL_TIM_Base_MspInit+0xb8>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012de:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <HAL_TIM_Base_MspInit+0xb8>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	201c      	movs	r0, #28
 80012f0:	f000 fb07 	bl	8001902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012f4:	201c      	movs	r0, #28
 80012f6:	f000 fb20 	bl	800193a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80012fa:	e036      	b.n	800136a <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a1d      	ldr	r2, [pc, #116]	@ (8001378 <HAL_TIM_Base_MspInit+0xbc>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d116      	bne.n	8001334 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <HAL_TIM_Base_MspInit+0xb8>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	4a19      	ldr	r2, [pc, #100]	@ (8001374 <HAL_TIM_Base_MspInit+0xb8>)
 8001310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001314:	6453      	str	r3, [r2, #68]	@ 0x44
 8001316:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <HAL_TIM_Base_MspInit+0xb8>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2019      	movs	r0, #25
 8001328:	f000 faeb 	bl	8001902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800132c:	2019      	movs	r0, #25
 800132e:	f000 fb04 	bl	800193a <HAL_NVIC_EnableIRQ>
}
 8001332:	e01a      	b.n	800136a <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM11)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a10      	ldr	r2, [pc, #64]	@ (800137c <HAL_TIM_Base_MspInit+0xc0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d115      	bne.n	800136a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <HAL_TIM_Base_MspInit+0xb8>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	4a0b      	ldr	r2, [pc, #44]	@ (8001374 <HAL_TIM_Base_MspInit+0xb8>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800134c:	6453      	str	r3, [r2, #68]	@ 0x44
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_TIM_Base_MspInit+0xb8>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	201a      	movs	r0, #26
 8001360:	f000 facf 	bl	8001902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001364:	201a      	movs	r0, #26
 8001366:	f000 fae8 	bl	800193a <HAL_NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40014400 	.word	0x40014400
 800137c:	40014800 	.word	0x40014800

08001380 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013a0:	d11e      	bne.n	80013e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b35      	ldr	r3, [pc, #212]	@ (800147c <HAL_TIM_MspPostInit+0xfc>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a34      	ldr	r2, [pc, #208]	@ (800147c <HAL_TIM_MspPostInit+0xfc>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b32      	ldr	r3, [pc, #200]	@ (800147c <HAL_TIM_MspPostInit+0xfc>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013be:	2301      	movs	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013ce:	2301      	movs	r3, #1
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4829      	ldr	r0, [pc, #164]	@ (8001480 <HAL_TIM_MspPostInit+0x100>)
 80013da:	f000 fb69 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80013de:	e048      	b.n	8001472 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM10)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a27      	ldr	r2, [pc, #156]	@ (8001484 <HAL_TIM_MspPostInit+0x104>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d11f      	bne.n	800142a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b23      	ldr	r3, [pc, #140]	@ (800147c <HAL_TIM_MspPostInit+0xfc>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a22      	ldr	r2, [pc, #136]	@ (800147c <HAL_TIM_MspPostInit+0xfc>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <HAL_TIM_MspPostInit+0xfc>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001406:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001418:	2303      	movs	r3, #3
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4819      	ldr	r0, [pc, #100]	@ (8001488 <HAL_TIM_MspPostInit+0x108>)
 8001424:	f000 fb44 	bl	8001ab0 <HAL_GPIO_Init>
}
 8001428:	e023      	b.n	8001472 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM11)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a17      	ldr	r2, [pc, #92]	@ (800148c <HAL_TIM_MspPostInit+0x10c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d11e      	bne.n	8001472 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	4b10      	ldr	r3, [pc, #64]	@ (800147c <HAL_TIM_MspPostInit+0xfc>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143c:	4a0f      	ldr	r2, [pc, #60]	@ (800147c <HAL_TIM_MspPostInit+0xfc>)
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	6313      	str	r3, [r2, #48]	@ 0x30
 8001444:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <HAL_TIM_MspPostInit+0xfc>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001450:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001462:	2303      	movs	r3, #3
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4806      	ldr	r0, [pc, #24]	@ (8001488 <HAL_TIM_MspPostInit+0x108>)
 800146e:	f000 fb1f 	bl	8001ab0 <HAL_GPIO_Init>
}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	@ 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40020000 	.word	0x40020000
 8001484:	40014400 	.word	0x40014400
 8001488:	40020400 	.word	0x40020400
 800148c:	40014800 	.word	0x40014800

08001490 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_USART2_UART_Init+0x4c>)
 8001496:	4a12      	ldr	r2, [pc, #72]	@ (80014e0 <MX_USART2_UART_Init+0x50>)
 8001498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <MX_USART2_UART_Init+0x4c>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_USART2_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <MX_USART2_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <MX_USART2_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <MX_USART2_UART_Init+0x4c>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <MX_USART2_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <MX_USART2_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	@ (80014dc <MX_USART2_UART_Init+0x4c>)
 80014c8:	f002 fe40 	bl	800414c <HAL_UART_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014d2:	f7ff fc9d 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200001b4 	.word	0x200001b4
 80014e0:	40004400 	.word	0x40004400

080014e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	@ 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a1d      	ldr	r2, [pc, #116]	@ (8001578 <HAL_UART_MspInit+0x94>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d133      	bne.n	800156e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <HAL_UART_MspInit+0x98>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4a1b      	ldr	r2, [pc, #108]	@ (800157c <HAL_UART_MspInit+0x98>)
 8001510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001514:	6413      	str	r3, [r2, #64]	@ 0x40
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <HAL_UART_MspInit+0x98>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_UART_MspInit+0x98>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a14      	ldr	r2, [pc, #80]	@ (800157c <HAL_UART_MspInit+0x98>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b12      	ldr	r3, [pc, #72]	@ (800157c <HAL_UART_MspInit+0x98>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800153e:	230c      	movs	r3, #12
 8001540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800154e:	2307      	movs	r3, #7
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4809      	ldr	r0, [pc, #36]	@ (8001580 <HAL_UART_MspInit+0x9c>)
 800155a:	f000 faa9 	bl	8001ab0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	2026      	movs	r0, #38	@ 0x26
 8001564:	f000 f9cd 	bl	8001902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001568:	2026      	movs	r0, #38	@ 0x26
 800156a:	f000 f9e6 	bl	800193a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	@ 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40004400 	.word	0x40004400
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000

08001584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001584:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001588:	f7ff fd74 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158e:	490d      	ldr	r1, [pc, #52]	@ (80015c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a4:	4c0a      	ldr	r4, [pc, #40]	@ (80015d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b2:	f003 fd17 	bl	8004fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff fa87 	bl	8000ac8 <main>
  bx  lr    
 80015ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80015c8:	080059b0 	.word	0x080059b0
  ldr r2, =_sbss
 80015cc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80015d0:	20000348 	.word	0x20000348

080015d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC_IRQHandler>
	...

080015d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001618 <HAL_Init+0x40>)
 80015e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <HAL_Init+0x40>)
 80015ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a07      	ldr	r2, [pc, #28]	@ (8001618 <HAL_Init+0x40>)
 80015fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001600:	2003      	movs	r0, #3
 8001602:	f000 f973 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001606:	200f      	movs	r0, #15
 8001608:	f000 f808 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800160c:	f7ff fc66 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023c00 	.word	0x40023c00

0800161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <HAL_InitTick+0x54>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_InitTick+0x58>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f999 	bl	8001972 <HAL_SYSTICK_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e00e      	b.n	8001668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d80a      	bhi.n	8001666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001650:	2200      	movs	r2, #0
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f000 f953 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165c:	4a06      	ldr	r2, [pc, #24]	@ (8001678 <HAL_InitTick+0x5c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000004 	.word	0x20000004
 8001674:	2000000c 	.word	0x2000000c
 8001678:	20000008 	.word	0x20000008

0800167c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_IncTick+0x20>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_IncTick+0x24>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <HAL_IncTick+0x24>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2000000c 	.word	0x2000000c
 80016a0:	200001fc 	.word	0x200001fc

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	200001fc 	.word	0x200001fc

080016bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff ffee 	bl	80016a4 <HAL_GetTick>
 80016c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d005      	beq.n	80016e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <HAL_Delay+0x44>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016e2:	bf00      	nop
 80016e4:	f7ff ffde 	bl	80016a4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d8f7      	bhi.n	80016e4 <HAL_Delay+0x28>
  {
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000000c 	.word	0x2000000c

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4907      	ldr	r1, [pc, #28]	@ (80017a0 <__NVIC_EnableIRQ+0x38>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db12      	blt.n	80017dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	490a      	ldr	r1, [pc, #40]	@ (80017e8 <__NVIC_DisableIRQ+0x44>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	3320      	adds	r3, #32
 80017cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80017d0:	f3bf 8f4f 	dsb	sy
}
 80017d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017d6:	f3bf 8f6f 	isb	sy
}
 80017da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	@ (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	@ (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	@ 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f7ff ff8e 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff05 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff1a 	bl	800174c <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff8e 	bl	8001840 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5d 	bl	80017ec <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff0d 	bl	8001768 <__NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff1d 	bl	80017a4 <__NVIC_DisableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ff94 	bl	80018a8 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001996:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001998:	f7ff fe84 	bl	80016a4 <HAL_GetTick>
 800199c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d008      	beq.n	80019bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2280      	movs	r2, #128	@ 0x80
 80019ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e052      	b.n	8001a62 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0216 	bic.w	r2, r2, #22
 80019ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d103      	bne.n	80019ec <HAL_DMA_Abort+0x62>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d007      	beq.n	80019fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0208 	bic.w	r2, r2, #8
 80019fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a0c:	e013      	b.n	8001a36 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a0e:	f7ff fe49 	bl	80016a4 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	d90c      	bls.n	8001a36 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e015      	b.n	8001a62 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e4      	bne.n	8001a0e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a48:	223f      	movs	r2, #63	@ 0x3f
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d004      	beq.n	8001a88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2280      	movs	r2, #128	@ 0x80
 8001a82:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e00c      	b.n	8001aa2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2205      	movs	r2, #5
 8001a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0201 	bic.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	@ 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	e159      	b.n	8001d80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001acc:	2201      	movs	r2, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	f040 8148 	bne.w	8001d7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d005      	beq.n	8001b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d130      	bne.n	8001b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 0201 	and.w	r2, r3, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d017      	beq.n	8001ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d123      	bne.n	8001bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	08da      	lsrs	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3208      	adds	r2, #8
 8001bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	220f      	movs	r2, #15
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	08da      	lsrs	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3208      	adds	r2, #8
 8001bee:	69b9      	ldr	r1, [r7, #24]
 8001bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0203 	and.w	r2, r3, #3
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a2 	beq.w	8001d7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b57      	ldr	r3, [pc, #348]	@ (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	4a56      	ldr	r2, [pc, #344]	@ (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c46:	4b54      	ldr	r3, [pc, #336]	@ (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c52:	4a52      	ldr	r2, [pc, #328]	@ (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	220f      	movs	r2, #15
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a49      	ldr	r2, [pc, #292]	@ (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d019      	beq.n	8001cb2 <HAL_GPIO_Init+0x202>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a48      	ldr	r2, [pc, #288]	@ (8001da4 <HAL_GPIO_Init+0x2f4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0x1fe>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a47      	ldr	r2, [pc, #284]	@ (8001da8 <HAL_GPIO_Init+0x2f8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <HAL_GPIO_Init+0x1fa>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a46      	ldr	r2, [pc, #280]	@ (8001dac <HAL_GPIO_Init+0x2fc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <HAL_GPIO_Init+0x1f6>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a45      	ldr	r2, [pc, #276]	@ (8001db0 <HAL_GPIO_Init+0x300>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d101      	bne.n	8001ca2 <HAL_GPIO_Init+0x1f2>
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc4:	4935      	ldr	r1, [pc, #212]	@ (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b38      	ldr	r3, [pc, #224]	@ (8001db4 <HAL_GPIO_Init+0x304>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a2f      	ldr	r2, [pc, #188]	@ (8001db4 <HAL_GPIO_Init+0x304>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <HAL_GPIO_Init+0x304>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a24      	ldr	r2, [pc, #144]	@ (8001db4 <HAL_GPIO_Init+0x304>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d26:	4b23      	ldr	r3, [pc, #140]	@ (8001db4 <HAL_GPIO_Init+0x304>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001db4 <HAL_GPIO_Init+0x304>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d50:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <HAL_GPIO_Init+0x304>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d74:	4a0f      	ldr	r2, [pc, #60]	@ (8001db4 <HAL_GPIO_Init+0x304>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	f67f aea2 	bls.w	8001acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3724      	adds	r7, #36	@ 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40013c00 	.word	0x40013c00

08001db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e001      	b.n	8001dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e04:	e003      	b.n	8001e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	041a      	lsls	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	619a      	str	r2, [r3, #24]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e26:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d006      	beq.n	8001e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e32:	4a05      	ldr	r2, [pc, #20]	@ (8001e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fdb2 	bl	80009a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40013c00 	.word	0x40013c00

08001e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e12b      	b.n	80020b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fd4e 	bl	8000914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2224      	movs	r2, #36	@ 0x24
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001eb0:	f001 f8da 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8001eb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4a81      	ldr	r2, [pc, #516]	@ (80020c0 <HAL_I2C_Init+0x274>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d807      	bhi.n	8001ed0 <HAL_I2C_Init+0x84>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4a80      	ldr	r2, [pc, #512]	@ (80020c4 <HAL_I2C_Init+0x278>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	bf94      	ite	ls
 8001ec8:	2301      	movls	r3, #1
 8001eca:	2300      	movhi	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	e006      	b.n	8001ede <HAL_I2C_Init+0x92>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4a7d      	ldr	r2, [pc, #500]	@ (80020c8 <HAL_I2C_Init+0x27c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	bf94      	ite	ls
 8001ed8:	2301      	movls	r3, #1
 8001eda:	2300      	movhi	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0e7      	b.n	80020b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4a78      	ldr	r2, [pc, #480]	@ (80020cc <HAL_I2C_Init+0x280>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	0c9b      	lsrs	r3, r3, #18
 8001ef0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a6a      	ldr	r2, [pc, #424]	@ (80020c0 <HAL_I2C_Init+0x274>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d802      	bhi.n	8001f20 <HAL_I2C_Init+0xd4>
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	e009      	b.n	8001f34 <HAL_I2C_Init+0xe8>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	4a69      	ldr	r2, [pc, #420]	@ (80020d0 <HAL_I2C_Init+0x284>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	3301      	adds	r3, #1
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	495c      	ldr	r1, [pc, #368]	@ (80020c0 <HAL_I2C_Init+0x274>)
 8001f50:	428b      	cmp	r3, r1
 8001f52:	d819      	bhi.n	8001f88 <HAL_I2C_Init+0x13c>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1e59      	subs	r1, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f62:	1c59      	adds	r1, r3, #1
 8001f64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f68:	400b      	ands	r3, r1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_I2C_Init+0x138>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1e59      	subs	r1, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f82:	e051      	b.n	8002028 <HAL_I2C_Init+0x1dc>
 8001f84:	2304      	movs	r3, #4
 8001f86:	e04f      	b.n	8002028 <HAL_I2C_Init+0x1dc>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d111      	bne.n	8001fb4 <HAL_I2C_Init+0x168>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1e58      	subs	r0, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6859      	ldr	r1, [r3, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	440b      	add	r3, r1
 8001f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	e012      	b.n	8001fda <HAL_I2C_Init+0x18e>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1e58      	subs	r0, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	0099      	lsls	r1, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf0c      	ite	eq
 8001fd4:	2301      	moveq	r3, #1
 8001fd6:	2300      	movne	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_I2C_Init+0x196>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e022      	b.n	8002028 <HAL_I2C_Init+0x1dc>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10e      	bne.n	8002008 <HAL_I2C_Init+0x1bc>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1e58      	subs	r0, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6859      	ldr	r1, [r3, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	440b      	add	r3, r1
 8001ff8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002006:	e00f      	b.n	8002028 <HAL_I2C_Init+0x1dc>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e58      	subs	r0, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	0099      	lsls	r1, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	fbb0 f3f3 	udiv	r3, r0, r3
 800201e:	3301      	adds	r3, #1
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	6809      	ldr	r1, [r1, #0]
 800202c:	4313      	orrs	r3, r2
 800202e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69da      	ldr	r2, [r3, #28]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002056:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6911      	ldr	r1, [r2, #16]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68d2      	ldr	r2, [r2, #12]
 8002062:	4311      	orrs	r1, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	430b      	orrs	r3, r1
 800206a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	000186a0 	.word	0x000186a0
 80020c4:	001e847f 	.word	0x001e847f
 80020c8:	003d08ff 	.word	0x003d08ff
 80020cc:	431bde83 	.word	0x431bde83
 80020d0:	10624dd3 	.word	0x10624dd3

080020d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	461a      	mov	r2, r3
 80020e0:	460b      	mov	r3, r1
 80020e2:	817b      	strh	r3, [r7, #10]
 80020e4:	4613      	mov	r3, r2
 80020e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff fadc 	bl	80016a4 <HAL_GetTick>
 80020ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	f040 80e0 	bne.w	80022bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2319      	movs	r3, #25
 8002102:	2201      	movs	r2, #1
 8002104:	4970      	ldr	r1, [pc, #448]	@ (80022c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f964 	bl	80023d4 <I2C_WaitOnFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002112:	2302      	movs	r3, #2
 8002114:	e0d3      	b.n	80022be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_I2C_Master_Transmit+0x50>
 8002120:	2302      	movs	r3, #2
 8002122:	e0cc      	b.n	80022be <HAL_I2C_Master_Transmit+0x1ea>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b01      	cmp	r3, #1
 8002138:	d007      	beq.n	800214a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002158:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2221      	movs	r2, #33	@ 0x21
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2210      	movs	r2, #16
 8002166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	893a      	ldrh	r2, [r7, #8]
 800217a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4a50      	ldr	r2, [pc, #320]	@ (80022cc <HAL_I2C_Master_Transmit+0x1f8>)
 800218a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800218c:	8979      	ldrh	r1, [r7, #10]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	6a3a      	ldr	r2, [r7, #32]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f89c 	bl	80022d0 <I2C_MasterRequestWrite>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e08d      	b.n	80022be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021b8:	e066      	b.n	8002288 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	6a39      	ldr	r1, [r7, #32]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fa22 	bl	8002608 <I2C_WaitOnTXEFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00d      	beq.n	80021e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d107      	bne.n	80021e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06b      	b.n	80022be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	781a      	ldrb	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b04      	cmp	r3, #4
 8002222:	d11b      	bne.n	800225c <HAL_I2C_Master_Transmit+0x188>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002228:	2b00      	cmp	r3, #0
 800222a:	d017      	beq.n	800225c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	781a      	ldrb	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	6a39      	ldr	r1, [r7, #32]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fa19 	bl	8002698 <I2C_WaitOnBTFFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00d      	beq.n	8002288 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	2b04      	cmp	r3, #4
 8002272:	d107      	bne.n	8002284 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002282:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e01a      	b.n	80022be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228c:	2b00      	cmp	r3, #0
 800228e:	d194      	bne.n	80021ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800229e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	00100002 	.word	0x00100002
 80022cc:	ffff0000 	.word	0xffff0000

080022d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	460b      	mov	r3, r1
 80022de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d006      	beq.n	80022fa <I2C_MasterRequestWrite+0x2a>
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d003      	beq.n	80022fa <I2C_MasterRequestWrite+0x2a>
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022f8:	d108      	bne.n	800230c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	e00b      	b.n	8002324 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002310:	2b12      	cmp	r3, #18
 8002312:	d107      	bne.n	8002324 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002322:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f84f 	bl	80023d4 <I2C_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00d      	beq.n	8002358 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800234a:	d103      	bne.n	8002354 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e035      	b.n	80023c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002360:	d108      	bne.n	8002374 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002362:	897b      	ldrh	r3, [r7, #10]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	e01b      	b.n	80023ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002374:	897b      	ldrh	r3, [r7, #10]
 8002376:	11db      	asrs	r3, r3, #7
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f003 0306 	and.w	r3, r3, #6
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f063 030f 	orn	r3, r3, #15
 8002384:	b2da      	uxtb	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	490e      	ldr	r1, [pc, #56]	@ (80023cc <I2C_MasterRequestWrite+0xfc>)
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f898 	bl	80024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e010      	b.n	80023c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023a2:	897b      	ldrh	r3, [r7, #10]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4907      	ldr	r1, [pc, #28]	@ (80023d0 <I2C_MasterRequestWrite+0x100>)
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f888 	bl	80024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	00010008 	.word	0x00010008
 80023d0:	00010002 	.word	0x00010002

080023d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	4613      	mov	r3, r2
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e4:	e048      	b.n	8002478 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d044      	beq.n	8002478 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ee:	f7ff f959 	bl	80016a4 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d302      	bcc.n	8002404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d139      	bne.n	8002478 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	0c1b      	lsrs	r3, r3, #16
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d10d      	bne.n	800242a <I2C_WaitOnFlagUntilTimeout+0x56>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	43da      	mvns	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4013      	ands	r3, r2
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	e00c      	b.n	8002444 <I2C_WaitOnFlagUntilTimeout+0x70>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	43da      	mvns	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4013      	ands	r3, r2
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	429a      	cmp	r2, r3
 8002448:	d116      	bne.n	8002478 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	f043 0220 	orr.w	r2, r3, #32
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e023      	b.n	80024c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	0c1b      	lsrs	r3, r3, #16
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d10d      	bne.n	800249e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	43da      	mvns	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4013      	ands	r3, r2
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	e00c      	b.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d093      	beq.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024d6:	e071      	b.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024e6:	d123      	bne.n	8002530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002500:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	f043 0204 	orr.w	r2, r3, #4
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e067      	b.n	8002600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d041      	beq.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002538:	f7ff f8b4 	bl	80016a4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	d302      	bcc.n	800254e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d136      	bne.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10c      	bne.n	8002572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4013      	ands	r3, r2
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf14      	ite	ne
 800256a:	2301      	movne	r3, #1
 800256c:	2300      	moveq	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	e00b      	b.n	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	43da      	mvns	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4013      	ands	r3, r2
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e021      	b.n	8002600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	0c1b      	lsrs	r3, r3, #16
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d10c      	bne.n	80025e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	43da      	mvns	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	4013      	ands	r3, r2
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e00b      	b.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4013      	ands	r3, r2
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f af6d 	bne.w	80024d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002614:	e034      	b.n	8002680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f886 	bl	8002728 <I2C_IsAcknowledgeFailed>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e034      	b.n	8002690 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262c:	d028      	beq.n	8002680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262e:	f7ff f839 	bl	80016a4 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	429a      	cmp	r2, r3
 800263c:	d302      	bcc.n	8002644 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d11d      	bne.n	8002680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264e:	2b80      	cmp	r3, #128	@ 0x80
 8002650:	d016      	beq.n	8002680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e007      	b.n	8002690 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268a:	2b80      	cmp	r3, #128	@ 0x80
 800268c:	d1c3      	bne.n	8002616 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026a4:	e034      	b.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f83e 	bl	8002728 <I2C_IsAcknowledgeFailed>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e034      	b.n	8002720 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d028      	beq.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026be:	f7fe fff1 	bl	80016a4 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d11d      	bne.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d016      	beq.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	f043 0220 	orr.w	r2, r3, #32
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e007      	b.n	8002720 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b04      	cmp	r3, #4
 800271c:	d1c3      	bne.n	80026a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273e:	d11b      	bne.n	8002778 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002748:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	f043 0204 	orr.w	r2, r3, #4
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e267      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d075      	beq.n	8002892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027a6:	4b88      	ldr	r3, [pc, #544]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d00c      	beq.n	80027cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b2:	4b85      	ldr	r3, [pc, #532]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d112      	bne.n	80027e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027be:	4b82      	ldr	r3, [pc, #520]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027ca:	d10b      	bne.n	80027e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	4b7e      	ldr	r3, [pc, #504]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d05b      	beq.n	8002890 <HAL_RCC_OscConfig+0x108>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d157      	bne.n	8002890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e242      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ec:	d106      	bne.n	80027fc <HAL_RCC_OscConfig+0x74>
 80027ee:	4b76      	ldr	r3, [pc, #472]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a75      	ldr	r2, [pc, #468]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e01d      	b.n	8002838 <HAL_RCC_OscConfig+0xb0>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0x98>
 8002806:	4b70      	ldr	r3, [pc, #448]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a6f      	ldr	r2, [pc, #444]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 800280c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4b6d      	ldr	r3, [pc, #436]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6c      	ldr	r2, [pc, #432]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 8002818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e00b      	b.n	8002838 <HAL_RCC_OscConfig+0xb0>
 8002820:	4b69      	ldr	r3, [pc, #420]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a68      	ldr	r2, [pc, #416]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 8002826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b66      	ldr	r3, [pc, #408]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a65      	ldr	r2, [pc, #404]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 8002832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe ff30 	bl	80016a4 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002848:	f7fe ff2c 	bl	80016a4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	@ 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e207      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b5b      	ldr	r3, [pc, #364]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0xc0>
 8002866:	e014      	b.n	8002892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe ff1c 	bl	80016a4 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002870:	f7fe ff18 	bl	80016a4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	@ 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e1f3      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002882:	4b51      	ldr	r3, [pc, #324]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0xe8>
 800288e:	e000      	b.n	8002892 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d063      	beq.n	8002966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800289e:	4b4a      	ldr	r3, [pc, #296]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028aa:	4b47      	ldr	r3, [pc, #284]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d11c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b6:	4b44      	ldr	r3, [pc, #272]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d116      	bne.n	80028f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	4b41      	ldr	r3, [pc, #260]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_RCC_OscConfig+0x152>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e1c7      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028da:	4b3b      	ldr	r3, [pc, #236]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4937      	ldr	r1, [pc, #220]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	e03a      	b.n	8002966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d020      	beq.n	800293a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f8:	4b34      	ldr	r3, [pc, #208]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe fed1 	bl	80016a4 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002906:	f7fe fecd 	bl	80016a4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e1a8      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002924:	4b28      	ldr	r3, [pc, #160]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4925      	ldr	r1, [pc, #148]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]
 8002938:	e015      	b.n	8002966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293a:	4b24      	ldr	r3, [pc, #144]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe feb0 	bl	80016a4 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002948:	f7fe feac 	bl	80016a4 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e187      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d036      	beq.n	80029e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297a:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <HAL_RCC_OscConfig+0x248>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe fe90 	bl	80016a4 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002988:	f7fe fe8c 	bl	80016a4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e167      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299a:	4b0b      	ldr	r3, [pc, #44]	@ (80029c8 <HAL_RCC_OscConfig+0x240>)
 800299c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x200>
 80029a6:	e01b      	b.n	80029e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a8:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <HAL_RCC_OscConfig+0x248>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fe79 	bl	80016a4 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b4:	e00e      	b.n	80029d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b6:	f7fe fe75 	bl	80016a4 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d907      	bls.n	80029d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e150      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
 80029c8:	40023800 	.word	0x40023800
 80029cc:	42470000 	.word	0x42470000
 80029d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d4:	4b88      	ldr	r3, [pc, #544]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 80029d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1ea      	bne.n	80029b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8097 	beq.w	8002b1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f2:	4b81      	ldr	r3, [pc, #516]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	4b7d      	ldr	r3, [pc, #500]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	4a7c      	ldr	r2, [pc, #496]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a0e:	4b7a      	ldr	r3, [pc, #488]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	4b77      	ldr	r3, [pc, #476]	@ (8002bfc <HAL_RCC_OscConfig+0x474>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d118      	bne.n	8002a5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2a:	4b74      	ldr	r3, [pc, #464]	@ (8002bfc <HAL_RCC_OscConfig+0x474>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a73      	ldr	r2, [pc, #460]	@ (8002bfc <HAL_RCC_OscConfig+0x474>)
 8002a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a36:	f7fe fe35 	bl	80016a4 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3e:	f7fe fe31 	bl	80016a4 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e10c      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a50:	4b6a      	ldr	r3, [pc, #424]	@ (8002bfc <HAL_RCC_OscConfig+0x474>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d106      	bne.n	8002a72 <HAL_RCC_OscConfig+0x2ea>
 8002a64:	4b64      	ldr	r3, [pc, #400]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a68:	4a63      	ldr	r2, [pc, #396]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a70:	e01c      	b.n	8002aac <HAL_RCC_OscConfig+0x324>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b05      	cmp	r3, #5
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x30c>
 8002a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7e:	4a5e      	ldr	r2, [pc, #376]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a86:	4b5c      	ldr	r3, [pc, #368]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_OscConfig+0x324>
 8002a94:	4b58      	ldr	r3, [pc, #352]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a98:	4a57      	ldr	r2, [pc, #348]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a9a:	f023 0301 	bic.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa0:	4b55      	ldr	r3, [pc, #340]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa4:	4a54      	ldr	r2, [pc, #336]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002aa6:	f023 0304 	bic.w	r3, r3, #4
 8002aaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d015      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fdf6 	bl	80016a4 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fe fdf2 	bl	80016a4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0cb      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad2:	4b49      	ldr	r3, [pc, #292]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0ee      	beq.n	8002abc <HAL_RCC_OscConfig+0x334>
 8002ade:	e014      	b.n	8002b0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fde0 	bl	80016a4 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fddc 	bl	80016a4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0b5      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afe:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1ee      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b10:	4b39      	ldr	r3, [pc, #228]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	4a38      	ldr	r2, [pc, #224]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80a1 	beq.w	8002c68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b26:	4b34      	ldr	r3, [pc, #208]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d05c      	beq.n	8002bec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d141      	bne.n	8002bbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3a:	4b31      	ldr	r3, [pc, #196]	@ (8002c00 <HAL_RCC_OscConfig+0x478>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fe fdb0 	bl	80016a4 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe fdac 	bl	80016a4 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e087      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	4b27      	ldr	r3, [pc, #156]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	019b      	lsls	r3, r3, #6
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	085b      	lsrs	r3, r3, #1
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	491b      	ldr	r1, [pc, #108]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b90:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <HAL_RCC_OscConfig+0x478>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7fe fd85 	bl	80016a4 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7fe fd81 	bl	80016a4 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e05c      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb0:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x416>
 8002bbc:	e054      	b.n	8002c68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <HAL_RCC_OscConfig+0x478>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fd6e 	bl	80016a4 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fd6a 	bl	80016a4 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e045      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x444>
 8002bea:	e03d      	b.n	8002c68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e038      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c04:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <HAL_RCC_OscConfig+0x4ec>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d028      	beq.n	8002c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d121      	bne.n	8002c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d11a      	bne.n	8002c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c34:	4013      	ands	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d111      	bne.n	8002c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d107      	bne.n	8002c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800

08002c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0cc      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b68      	ldr	r3, [pc, #416]	@ (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d90c      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b65      	ldr	r3, [pc, #404]	@ (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b63      	ldr	r3, [pc, #396]	@ (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0b8      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d020      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ccc:	4b59      	ldr	r3, [pc, #356]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a58      	ldr	r2, [pc, #352]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce4:	4b53      	ldr	r3, [pc, #332]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4a52      	ldr	r2, [pc, #328]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf0:	4b50      	ldr	r3, [pc, #320]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	494d      	ldr	r1, [pc, #308]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d044      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b47      	ldr	r3, [pc, #284]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d119      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e07f      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d003      	beq.n	8002d36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d36:	4b3f      	ldr	r3, [pc, #252]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e06f      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d46:	4b3b      	ldr	r3, [pc, #236]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e067      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d56:	4b37      	ldr	r3, [pc, #220]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f023 0203 	bic.w	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4934      	ldr	r1, [pc, #208]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d68:	f7fe fc9c 	bl	80016a4 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d70:	f7fe fc98 	bl	80016a4 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e04f      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d86:	4b2b      	ldr	r3, [pc, #172]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 020c 	and.w	r2, r3, #12
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d1eb      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d98:	4b25      	ldr	r3, [pc, #148]	@ (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d20c      	bcs.n	8002dc0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b22      	ldr	r3, [pc, #136]	@ (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b20      	ldr	r3, [pc, #128]	@ (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e032      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4916      	ldr	r1, [pc, #88]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dea:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	490e      	ldr	r1, [pc, #56]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dfe:	f000 f821 	bl	8002e44 <HAL_RCC_GetSysClockFreq>
 8002e02:	4602      	mov	r2, r0
 8002e04:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	490a      	ldr	r1, [pc, #40]	@ (8002e38 <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	5ccb      	ldrb	r3, [r1, r3]
 8002e12:	fa22 f303 	lsr.w	r3, r2, r3
 8002e16:	4a09      	ldr	r2, [pc, #36]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e1a:	4b09      	ldr	r3, [pc, #36]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fbfc 	bl	800161c <HAL_InitTick>

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023c00 	.word	0x40023c00
 8002e34:	40023800 	.word	0x40023800
 8002e38:	08005954 	.word	0x08005954
 8002e3c:	20000004 	.word	0x20000004
 8002e40:	20000008 	.word	0x20000008

08002e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e48:	b094      	sub	sp, #80	@ 0x50
 8002e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e5c:	4b79      	ldr	r3, [pc, #484]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d00d      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x40>
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	f200 80e1 	bhi.w	8003030 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x34>
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d003      	beq.n	8002e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e76:	e0db      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e78:	4b73      	ldr	r3, [pc, #460]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e7c:	e0db      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e7e:	4b73      	ldr	r3, [pc, #460]	@ (800304c <HAL_RCC_GetSysClockFreq+0x208>)
 8002e80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e82:	e0d8      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e84:	4b6f      	ldr	r3, [pc, #444]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d063      	beq.n	8002f62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	099b      	lsrs	r3, r3, #6
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ea4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eac:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eae:	2300      	movs	r3, #0
 8002eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	462b      	mov	r3, r5
 8002eba:	f04f 0000 	mov.w	r0, #0
 8002ebe:	f04f 0100 	mov.w	r1, #0
 8002ec2:	0159      	lsls	r1, r3, #5
 8002ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec8:	0150      	lsls	r0, r2, #5
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4621      	mov	r1, r4
 8002ed0:	1a51      	subs	r1, r2, r1
 8002ed2:	6139      	str	r1, [r7, #16]
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ee8:	4659      	mov	r1, fp
 8002eea:	018b      	lsls	r3, r1, #6
 8002eec:	4651      	mov	r1, sl
 8002eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ef2:	4651      	mov	r1, sl
 8002ef4:	018a      	lsls	r2, r1, #6
 8002ef6:	4651      	mov	r1, sl
 8002ef8:	ebb2 0801 	subs.w	r8, r2, r1
 8002efc:	4659      	mov	r1, fp
 8002efe:	eb63 0901 	sbc.w	r9, r3, r1
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f16:	4690      	mov	r8, r2
 8002f18:	4699      	mov	r9, r3
 8002f1a:	4623      	mov	r3, r4
 8002f1c:	eb18 0303 	adds.w	r3, r8, r3
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	462b      	mov	r3, r5
 8002f24:	eb49 0303 	adc.w	r3, r9, r3
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f36:	4629      	mov	r1, r5
 8002f38:	024b      	lsls	r3, r1, #9
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f40:	4621      	mov	r1, r4
 8002f42:	024a      	lsls	r2, r1, #9
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f54:	f7fd f994 	bl	8000280 <__aeabi_uldivmod>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f60:	e058      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f62:	4b38      	ldr	r3, [pc, #224]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	099b      	lsrs	r3, r3, #6
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f72:	623b      	str	r3, [r7, #32]
 8002f74:	2300      	movs	r3, #0
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	464b      	mov	r3, r9
 8002f80:	f04f 0000 	mov.w	r0, #0
 8002f84:	f04f 0100 	mov.w	r1, #0
 8002f88:	0159      	lsls	r1, r3, #5
 8002f8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f8e:	0150      	lsls	r0, r2, #5
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4641      	mov	r1, r8
 8002f96:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fb4:	ebb2 040a 	subs.w	r4, r2, sl
 8002fb8:	eb63 050b 	sbc.w	r5, r3, fp
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	00eb      	lsls	r3, r5, #3
 8002fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fca:	00e2      	lsls	r2, r4, #3
 8002fcc:	4614      	mov	r4, r2
 8002fce:	461d      	mov	r5, r3
 8002fd0:	4643      	mov	r3, r8
 8002fd2:	18e3      	adds	r3, r4, r3
 8002fd4:	603b      	str	r3, [r7, #0]
 8002fd6:	464b      	mov	r3, r9
 8002fd8:	eb45 0303 	adc.w	r3, r5, r3
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fea:	4629      	mov	r1, r5
 8002fec:	028b      	lsls	r3, r1, #10
 8002fee:	4621      	mov	r1, r4
 8002ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	028a      	lsls	r2, r1, #10
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ffe:	2200      	movs	r2, #0
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	61fa      	str	r2, [r7, #28]
 8003004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003008:	f7fd f93a 	bl	8000280 <__aeabi_uldivmod>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4613      	mov	r3, r2
 8003012:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003014:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	3301      	adds	r3, #1
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003024:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800302e:	e002      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b05      	ldr	r3, [pc, #20]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x204>)
 8003032:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003038:	4618      	mov	r0, r3
 800303a:	3750      	adds	r7, #80	@ 0x50
 800303c:	46bd      	mov	sp, r7
 800303e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	00f42400 	.word	0x00f42400
 800304c:	007a1200 	.word	0x007a1200

08003050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003054:	4b03      	ldr	r3, [pc, #12]	@ (8003064 <HAL_RCC_GetHCLKFreq+0x14>)
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000004 	.word	0x20000004

08003068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800306c:	f7ff fff0 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0a9b      	lsrs	r3, r3, #10
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4903      	ldr	r1, [pc, #12]	@ (800308c <HAL_RCC_GetPCLK1Freq+0x24>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	08005964 	.word	0x08005964

08003090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003094:	f7ff ffdc 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	0b5b      	lsrs	r3, r3, #13
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	4903      	ldr	r1, [pc, #12]	@ (80030b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40023800 	.word	0x40023800
 80030b4:	08005964 	.word	0x08005964

080030b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e041      	b.n	800314e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fe f8ec 	bl	80012bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	4619      	mov	r1, r3
 80030f6:	4610      	mov	r0, r2
 80030f8:	f000 fcce 	bl	8003a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d001      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e044      	b.n	80031fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1e      	ldr	r2, [pc, #120]	@ (8003208 <HAL_TIM_Base_Start_IT+0xb0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d018      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x6c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800319a:	d013      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x6c>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1a      	ldr	r2, [pc, #104]	@ (800320c <HAL_TIM_Base_Start_IT+0xb4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00e      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x6c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a19      	ldr	r2, [pc, #100]	@ (8003210 <HAL_TIM_Base_Start_IT+0xb8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x6c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a17      	ldr	r2, [pc, #92]	@ (8003214 <HAL_TIM_Base_Start_IT+0xbc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x6c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <HAL_TIM_Base_Start_IT+0xc0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d111      	bne.n	80031e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d010      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e6:	e007      	b.n	80031f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000
 800320c:	40000400 	.word	0x40000400
 8003210:	40000800 	.word	0x40000800
 8003214:	40000c00 	.word	0x40000c00
 8003218:	40014000 	.word	0x40014000

0800321c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a1a      	ldr	r2, [r3, #32]
 800323a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10f      	bne.n	8003264 <HAL_TIM_Base_Stop_IT+0x48>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6a1a      	ldr	r2, [r3, #32]
 800324a:	f240 4344 	movw	r3, #1092	@ 0x444
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d107      	bne.n	8003264 <HAL_TIM_Base_Stop_IT+0x48>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e041      	b.n	8003310 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d106      	bne.n	80032a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f839 	bl	8003318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3304      	adds	r3, #4
 80032b6:	4619      	mov	r1, r3
 80032b8:	4610      	mov	r0, r2
 80032ba:	f000 fbed 	bl	8003a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_TIM_PWM_Start+0x24>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	bf14      	ite	ne
 8003348:	2301      	movne	r3, #1
 800334a:	2300      	moveq	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e022      	b.n	8003396 <HAL_TIM_PWM_Start+0x6a>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2b04      	cmp	r3, #4
 8003354:	d109      	bne.n	800336a <HAL_TIM_PWM_Start+0x3e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b01      	cmp	r3, #1
 8003360:	bf14      	ite	ne
 8003362:	2301      	movne	r3, #1
 8003364:	2300      	moveq	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	e015      	b.n	8003396 <HAL_TIM_PWM_Start+0x6a>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d109      	bne.n	8003384 <HAL_TIM_PWM_Start+0x58>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	bf14      	ite	ne
 800337c:	2301      	movne	r3, #1
 800337e:	2300      	moveq	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e008      	b.n	8003396 <HAL_TIM_PWM_Start+0x6a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	bf14      	ite	ne
 8003390:	2301      	movne	r3, #1
 8003392:	2300      	moveq	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e068      	b.n	8003470 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_PWM_Start+0x82>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033ac:	e013      	b.n	80033d6 <HAL_TIM_PWM_Start+0xaa>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d104      	bne.n	80033be <HAL_TIM_PWM_Start+0x92>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033bc:	e00b      	b.n	80033d6 <HAL_TIM_PWM_Start+0xaa>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d104      	bne.n	80033ce <HAL_TIM_PWM_Start+0xa2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033cc:	e003      	b.n	80033d6 <HAL_TIM_PWM_Start+0xaa>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2201      	movs	r2, #1
 80033dc:	6839      	ldr	r1, [r7, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fe0c 	bl	8003ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a23      	ldr	r2, [pc, #140]	@ (8003478 <HAL_TIM_PWM_Start+0x14c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d107      	bne.n	80033fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1d      	ldr	r2, [pc, #116]	@ (8003478 <HAL_TIM_PWM_Start+0x14c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d018      	beq.n	800343a <HAL_TIM_PWM_Start+0x10e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003410:	d013      	beq.n	800343a <HAL_TIM_PWM_Start+0x10e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a19      	ldr	r2, [pc, #100]	@ (800347c <HAL_TIM_PWM_Start+0x150>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00e      	beq.n	800343a <HAL_TIM_PWM_Start+0x10e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a17      	ldr	r2, [pc, #92]	@ (8003480 <HAL_TIM_PWM_Start+0x154>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d009      	beq.n	800343a <HAL_TIM_PWM_Start+0x10e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a16      	ldr	r2, [pc, #88]	@ (8003484 <HAL_TIM_PWM_Start+0x158>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_TIM_PWM_Start+0x10e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a14      	ldr	r2, [pc, #80]	@ (8003488 <HAL_TIM_PWM_Start+0x15c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d111      	bne.n	800345e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b06      	cmp	r3, #6
 800344a:	d010      	beq.n	800346e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345c:	e007      	b.n	800346e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 0201 	orr.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40010000 	.word	0x40010000
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800
 8003484:	40000c00 	.word	0x40000c00
 8003488:	40014000 	.word	0x40014000

0800348c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2200      	movs	r2, #0
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fdac 	bl	8003ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a29      	ldr	r2, [pc, #164]	@ (8003550 <HAL_TIM_PWM_Stop+0xc4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d117      	bne.n	80034de <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6a1a      	ldr	r2, [r3, #32]
 80034b4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <HAL_TIM_PWM_Stop+0x52>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6a1a      	ldr	r2, [r3, #32]
 80034c4:	f240 4344 	movw	r3, #1092	@ 0x444
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d107      	bne.n	80034de <HAL_TIM_PWM_Stop+0x52>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <HAL_TIM_PWM_Stop+0x82>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6a1a      	ldr	r2, [r3, #32]
 80034f4:	f240 4344 	movw	r3, #1092	@ 0x444
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d107      	bne.n	800350e <HAL_TIM_PWM_Stop+0x82>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <HAL_TIM_PWM_Stop+0x92>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800351c:	e013      	b.n	8003546 <HAL_TIM_PWM_Stop+0xba>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b04      	cmp	r3, #4
 8003522:	d104      	bne.n	800352e <HAL_TIM_PWM_Stop+0xa2>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800352c:	e00b      	b.n	8003546 <HAL_TIM_PWM_Stop+0xba>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b08      	cmp	r3, #8
 8003532:	d104      	bne.n	800353e <HAL_TIM_PWM_Stop+0xb2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800353c:	e003      	b.n	8003546 <HAL_TIM_PWM_Stop+0xba>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40010000 	.word	0x40010000

08003554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d020      	beq.n	80035b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01b      	beq.n	80035b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0202 	mvn.w	r2, #2
 8003588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fa5b 	bl	8003a5a <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fa4d 	bl	8003a46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fa5e 	bl	8003a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d020      	beq.n	8003604 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01b      	beq.n	8003604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0204 	mvn.w	r2, #4
 80035d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2202      	movs	r2, #2
 80035da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fa35 	bl	8003a5a <HAL_TIM_IC_CaptureCallback>
 80035f0:	e005      	b.n	80035fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa27 	bl	8003a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fa38 	bl	8003a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d020      	beq.n	8003650 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01b      	beq.n	8003650 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0208 	mvn.w	r2, #8
 8003620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2204      	movs	r2, #4
 8003626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa0f 	bl	8003a5a <HAL_TIM_IC_CaptureCallback>
 800363c:	e005      	b.n	800364a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa01 	bl	8003a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fa12 	bl	8003a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	d020      	beq.n	800369c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01b      	beq.n	800369c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0210 	mvn.w	r2, #16
 800366c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2208      	movs	r2, #8
 8003672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f9e9 	bl	8003a5a <HAL_TIM_IC_CaptureCallback>
 8003688:	e005      	b.n	8003696 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f9db 	bl	8003a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f9ec 	bl	8003a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00c      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0201 	mvn.w	r2, #1
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd f9c8 	bl	8000a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fd2a 	bl	8004138 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f9bd 	bl	8003a82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00c      	beq.n	800372c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0220 	mvn.w	r2, #32
 8003724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fcfc 	bl	8004124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800374e:	2302      	movs	r3, #2
 8003750:	e0ae      	b.n	80038b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b0c      	cmp	r3, #12
 800375e:	f200 809f 	bhi.w	80038a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003762:	a201      	add	r2, pc, #4	@ (adr r2, 8003768 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	0800379d 	.word	0x0800379d
 800376c:	080038a1 	.word	0x080038a1
 8003770:	080038a1 	.word	0x080038a1
 8003774:	080038a1 	.word	0x080038a1
 8003778:	080037dd 	.word	0x080037dd
 800377c:	080038a1 	.word	0x080038a1
 8003780:	080038a1 	.word	0x080038a1
 8003784:	080038a1 	.word	0x080038a1
 8003788:	0800381f 	.word	0x0800381f
 800378c:	080038a1 	.word	0x080038a1
 8003790:	080038a1 	.word	0x080038a1
 8003794:	080038a1 	.word	0x080038a1
 8003798:	0800385f 	.word	0x0800385f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fa04 	bl	8003bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0208 	orr.w	r2, r2, #8
 80037b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0204 	bic.w	r2, r2, #4
 80037c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6999      	ldr	r1, [r3, #24]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	619a      	str	r2, [r3, #24]
      break;
 80037da:	e064      	b.n	80038a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fa4a 	bl	8003c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6999      	ldr	r1, [r3, #24]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	021a      	lsls	r2, r3, #8
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	619a      	str	r2, [r3, #24]
      break;
 800381c:	e043      	b.n	80038a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fa95 	bl	8003d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69da      	ldr	r2, [r3, #28]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0208 	orr.w	r2, r2, #8
 8003838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0204 	bic.w	r2, r2, #4
 8003848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69d9      	ldr	r1, [r3, #28]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	61da      	str	r2, [r3, #28]
      break;
 800385c:	e023      	b.n	80038a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fadf 	bl	8003e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69d9      	ldr	r1, [r3, #28]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	021a      	lsls	r2, r3, #8
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	61da      	str	r2, [r3, #28]
      break;
 800389e:	e002      	b.n	80038a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	75fb      	strb	r3, [r7, #23]
      break;
 80038a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_TIM_ConfigClockSource+0x1c>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e0b4      	b.n	8003a3e <HAL_TIM_ConfigClockSource+0x186>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800390c:	d03e      	beq.n	800398c <HAL_TIM_ConfigClockSource+0xd4>
 800390e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003912:	f200 8087 	bhi.w	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 8003916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800391a:	f000 8086 	beq.w	8003a2a <HAL_TIM_ConfigClockSource+0x172>
 800391e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003922:	d87f      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b70      	cmp	r3, #112	@ 0x70
 8003926:	d01a      	beq.n	800395e <HAL_TIM_ConfigClockSource+0xa6>
 8003928:	2b70      	cmp	r3, #112	@ 0x70
 800392a:	d87b      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b60      	cmp	r3, #96	@ 0x60
 800392e:	d050      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0x11a>
 8003930:	2b60      	cmp	r3, #96	@ 0x60
 8003932:	d877      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 8003934:	2b50      	cmp	r3, #80	@ 0x50
 8003936:	d03c      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0xfa>
 8003938:	2b50      	cmp	r3, #80	@ 0x50
 800393a:	d873      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 800393c:	2b40      	cmp	r3, #64	@ 0x40
 800393e:	d058      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x13a>
 8003940:	2b40      	cmp	r3, #64	@ 0x40
 8003942:	d86f      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 8003944:	2b30      	cmp	r3, #48	@ 0x30
 8003946:	d064      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x15a>
 8003948:	2b30      	cmp	r3, #48	@ 0x30
 800394a:	d86b      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 800394c:	2b20      	cmp	r3, #32
 800394e:	d060      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x15a>
 8003950:	2b20      	cmp	r3, #32
 8003952:	d867      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d05c      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x15a>
 8003958:	2b10      	cmp	r3, #16
 800395a:	d05a      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x15a>
 800395c:	e062      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800396e:	f000 fb25 	bl	8003fbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003980:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	609a      	str	r2, [r3, #8]
      break;
 800398a:	e04f      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800399c:	f000 fb0e 	bl	8003fbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039ae:	609a      	str	r2, [r3, #8]
      break;
 80039b0:	e03c      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039be:	461a      	mov	r2, r3
 80039c0:	f000 fa82 	bl	8003ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2150      	movs	r1, #80	@ 0x50
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fadb 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 80039d0:	e02c      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039de:	461a      	mov	r2, r3
 80039e0:	f000 faa1 	bl	8003f26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2160      	movs	r1, #96	@ 0x60
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 facb 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 80039f0:	e01c      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fe:	461a      	mov	r2, r3
 8003a00:	f000 fa62 	bl	8003ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2140      	movs	r1, #64	@ 0x40
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fabb 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003a10:	e00c      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	f000 fab2 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003a22:	e003      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      break;
 8003a28:	e000      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a3a      	ldr	r2, [pc, #232]	@ (8003b94 <TIM_Base_SetConfig+0xfc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00f      	beq.n	8003ad0 <TIM_Base_SetConfig+0x38>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab6:	d00b      	beq.n	8003ad0 <TIM_Base_SetConfig+0x38>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a37      	ldr	r2, [pc, #220]	@ (8003b98 <TIM_Base_SetConfig+0x100>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d007      	beq.n	8003ad0 <TIM_Base_SetConfig+0x38>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a36      	ldr	r2, [pc, #216]	@ (8003b9c <TIM_Base_SetConfig+0x104>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <TIM_Base_SetConfig+0x38>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a35      	ldr	r2, [pc, #212]	@ (8003ba0 <TIM_Base_SetConfig+0x108>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d108      	bne.n	8003ae2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8003b94 <TIM_Base_SetConfig+0xfc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d01b      	beq.n	8003b22 <TIM_Base_SetConfig+0x8a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af0:	d017      	beq.n	8003b22 <TIM_Base_SetConfig+0x8a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a28      	ldr	r2, [pc, #160]	@ (8003b98 <TIM_Base_SetConfig+0x100>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <TIM_Base_SetConfig+0x8a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a27      	ldr	r2, [pc, #156]	@ (8003b9c <TIM_Base_SetConfig+0x104>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00f      	beq.n	8003b22 <TIM_Base_SetConfig+0x8a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a26      	ldr	r2, [pc, #152]	@ (8003ba0 <TIM_Base_SetConfig+0x108>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00b      	beq.n	8003b22 <TIM_Base_SetConfig+0x8a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a25      	ldr	r2, [pc, #148]	@ (8003ba4 <TIM_Base_SetConfig+0x10c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d007      	beq.n	8003b22 <TIM_Base_SetConfig+0x8a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a24      	ldr	r2, [pc, #144]	@ (8003ba8 <TIM_Base_SetConfig+0x110>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d003      	beq.n	8003b22 <TIM_Base_SetConfig+0x8a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a23      	ldr	r2, [pc, #140]	@ (8003bac <TIM_Base_SetConfig+0x114>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d108      	bne.n	8003b34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b94 <TIM_Base_SetConfig+0xfc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d103      	bne.n	8003b68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d105      	bne.n	8003b86 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f023 0201 	bic.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	611a      	str	r2, [r3, #16]
  }
}
 8003b86:	bf00      	nop
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800
 8003ba0:	40000c00 	.word	0x40000c00
 8003ba4:	40014000 	.word	0x40014000
 8003ba8:	40014400 	.word	0x40014400
 8003bac:	40014800 	.word	0x40014800

08003bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f023 0201 	bic.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f023 0302 	bic.w	r3, r3, #2
 8003bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a1c      	ldr	r2, [pc, #112]	@ (8003c78 <TIM_OC1_SetConfig+0xc8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d10c      	bne.n	8003c26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0308 	bic.w	r3, r3, #8
 8003c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f023 0304 	bic.w	r3, r3, #4
 8003c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a13      	ldr	r2, [pc, #76]	@ (8003c78 <TIM_OC1_SetConfig+0xc8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d111      	bne.n	8003c52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	621a      	str	r2, [r3, #32]
}
 8003c6c:	bf00      	nop
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40010000 	.word	0x40010000

08003c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	f023 0210 	bic.w	r2, r3, #16
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0320 	bic.w	r3, r3, #32
 8003cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d50 <TIM_OC2_SetConfig+0xd4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10d      	bne.n	8003cf8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a15      	ldr	r2, [pc, #84]	@ (8003d50 <TIM_OC2_SetConfig+0xd4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d113      	bne.n	8003d28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	621a      	str	r2, [r3, #32]
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40010000 	.word	0x40010000

08003d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1d      	ldr	r2, [pc, #116]	@ (8003e24 <TIM_OC3_SetConfig+0xd0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10d      	bne.n	8003dce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a14      	ldr	r2, [pc, #80]	@ (8003e24 <TIM_OC3_SetConfig+0xd0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d113      	bne.n	8003dfe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	621a      	str	r2, [r3, #32]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40010000 	.word	0x40010000

08003e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	031b      	lsls	r3, r3, #12
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a10      	ldr	r2, [pc, #64]	@ (8003ec4 <TIM_OC4_SetConfig+0x9c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d109      	bne.n	8003e9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	019b      	lsls	r3, r3, #6
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	621a      	str	r2, [r3, #32]
}
 8003eb6:	bf00      	nop
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40010000 	.word	0x40010000

08003ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f023 0201 	bic.w	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f023 030a 	bic.w	r3, r3, #10
 8003f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b087      	sub	sp, #28
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f023 0210 	bic.w	r2, r3, #16
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	031b      	lsls	r3, r3, #12
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f043 0307 	orr.w	r3, r3, #7
 8003fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	609a      	str	r2, [r3, #8]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	021a      	lsls	r2, r3, #8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	609a      	str	r2, [r3, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2201      	movs	r2, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1a      	ldr	r2, [r3, #32]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	43db      	mvns	r3, r3
 800401e:	401a      	ands	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	fa01 f303 	lsl.w	r3, r1, r3
 8004034:	431a      	orrs	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
	...

08004048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800405c:	2302      	movs	r3, #2
 800405e:	e050      	b.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1c      	ldr	r2, [pc, #112]	@ (8004110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d018      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ac:	d013      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a18      	ldr	r2, [pc, #96]	@ (8004114 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a16      	ldr	r2, [pc, #88]	@ (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a15      	ldr	r2, [pc, #84]	@ (800411c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a13      	ldr	r2, [pc, #76]	@ (8004120 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d10c      	bne.n	80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40014000 	.word	0x40014000

08004124 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e042      	b.n	80041e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fd f9b6 	bl	80014e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2224      	movs	r2, #36	@ 0x24
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800418e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 fc85 	bl	8004aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b0ba      	sub	sp, #232	@ 0xe8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004212:	2300      	movs	r3, #0
 8004214:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800421e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800422a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10f      	bne.n	8004252 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_UART_IRQHandler+0x66>
 800423e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fb69 	bl	8004922 <UART_Receive_IT>
      return;
 8004250:	e25b      	b.n	800470a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 80de 	beq.w	8004418 <HAL_UART_IRQHandler+0x22c>
 800425c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800426c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80d1 	beq.w	8004418 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00b      	beq.n	800429a <HAL_UART_IRQHandler+0xae>
 8004282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	f043 0201 	orr.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800429a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_UART_IRQHandler+0xd2>
 80042a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b6:	f043 0202 	orr.w	r2, r3, #2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <HAL_UART_IRQHandler+0xf6>
 80042ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042da:	f043 0204 	orr.w	r2, r3, #4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d011      	beq.n	8004312 <HAL_UART_IRQHandler+0x126>
 80042ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d105      	bne.n	8004306 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430a:	f043 0208 	orr.w	r2, r3, #8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 81f2 	beq.w	8004700 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800431c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_UART_IRQHandler+0x14e>
 8004328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 faf4 	bl	8004922 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004344:	2b40      	cmp	r3, #64	@ 0x40
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <HAL_UART_IRQHandler+0x17a>
 800435e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d04f      	beq.n	8004406 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f9fc 	bl	8004764 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004376:	2b40      	cmp	r3, #64	@ 0x40
 8004378:	d141      	bne.n	80043fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3314      	adds	r3, #20
 8004380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004390:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004398:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3314      	adds	r3, #20
 80043a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1d9      	bne.n	800437a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d013      	beq.n	80043f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d2:	4a7e      	ldr	r2, [pc, #504]	@ (80045cc <HAL_UART_IRQHandler+0x3e0>)
 80043d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fd fb45 	bl	8001a6a <HAL_DMA_Abort_IT>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d016      	beq.n	8004414 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043f0:	4610      	mov	r0, r2
 80043f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	e00e      	b.n	8004414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f99e 	bl	8004738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fc:	e00a      	b.n	8004414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f99a 	bl	8004738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004404:	e006      	b.n	8004414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f996 	bl	8004738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004412:	e175      	b.n	8004700 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004414:	bf00      	nop
    return;
 8004416:	e173      	b.n	8004700 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441c:	2b01      	cmp	r3, #1
 800441e:	f040 814f 	bne.w	80046c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8148 	beq.w	80046c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8141 	beq.w	80046c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800443e:	2300      	movs	r3, #0
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445e:	2b40      	cmp	r3, #64	@ 0x40
 8004460:	f040 80b6 	bne.w	80045d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004470:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8145 	beq.w	8004704 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800447e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004482:	429a      	cmp	r2, r3
 8004484:	f080 813e 	bcs.w	8004704 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800448e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800449a:	f000 8088 	beq.w	80045ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1d9      	bne.n	800449e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3314      	adds	r3, #20
 80044f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3314      	adds	r3, #20
 800450a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800450e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004512:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004516:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004520:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e1      	bne.n	80044ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3314      	adds	r3, #20
 800452c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800453c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800454a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800454c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004550:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004558:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e3      	bne.n	8004526 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800457c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800457e:	f023 0310 	bic.w	r3, r3, #16
 8004582:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004590:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004592:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004596:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800459e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e3      	bne.n	800456c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fd f9ee 	bl	800198a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f8c1 	bl	800474c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045ca:	e09b      	b.n	8004704 <HAL_UART_IRQHandler+0x518>
 80045cc:	0800482b 	.word	0x0800482b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045d8:	b29b      	uxth	r3, r3
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 808e 	beq.w	8004708 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80045ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8089 	beq.w	8004708 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	330c      	adds	r3, #12
 80045fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800460c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800461a:	647a      	str	r2, [r7, #68]	@ 0x44
 800461c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004620:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e3      	bne.n	80045f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3314      	adds	r3, #20
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	623b      	str	r3, [r7, #32]
   return(result);
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3314      	adds	r3, #20
 800464e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004652:	633a      	str	r2, [r7, #48]	@ 0x30
 8004654:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e3      	bne.n	800462e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	330c      	adds	r3, #12
 800467a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	60fb      	str	r3, [r7, #12]
   return(result);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0310 	bic.w	r3, r3, #16
 800468a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	330c      	adds	r3, #12
 8004694:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004698:	61fa      	str	r2, [r7, #28]
 800469a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	69b9      	ldr	r1, [r7, #24]
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	617b      	str	r3, [r7, #20]
   return(result);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e3      	bne.n	8004674 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046b6:	4619      	mov	r1, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f847 	bl	800474c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046be:	e023      	b.n	8004708 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <HAL_UART_IRQHandler+0x4f4>
 80046cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f8ba 	bl	8004852 <UART_Transmit_IT>
    return;
 80046de:	e014      	b.n	800470a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00e      	beq.n	800470a <HAL_UART_IRQHandler+0x51e>
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d008      	beq.n	800470a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8fa 	bl	80048f2 <UART_EndTransmit_IT>
    return;
 80046fe:	e004      	b.n	800470a <HAL_UART_IRQHandler+0x51e>
    return;
 8004700:	bf00      	nop
 8004702:	e002      	b.n	800470a <HAL_UART_IRQHandler+0x51e>
      return;
 8004704:	bf00      	nop
 8004706:	e000      	b.n	800470a <HAL_UART_IRQHandler+0x51e>
      return;
 8004708:	bf00      	nop
  }
}
 800470a:	37e8      	adds	r7, #232	@ 0xe8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b095      	sub	sp, #84	@ 0x54
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004776:	e853 3f00 	ldrex	r3, [r3]
 800477a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800477c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800478c:	643a      	str	r2, [r7, #64]	@ 0x40
 800478e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004792:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004794:	e841 2300 	strex	r3, r2, [r1]
 8004798:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800479a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e5      	bne.n	800476c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3314      	adds	r3, #20
 80047a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3314      	adds	r3, #20
 80047be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e5      	bne.n	80047a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d119      	bne.n	8004810 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f023 0310 	bic.w	r3, r3, #16
 80047f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047fc:	61ba      	str	r2, [r7, #24]
 80047fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	6979      	ldr	r1, [r7, #20]
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	613b      	str	r3, [r7, #16]
   return(result);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e5      	bne.n	80047dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800481e:	bf00      	nop
 8004820:	3754      	adds	r7, #84	@ 0x54
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f7ff ff77 	bl	8004738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800484a:	bf00      	nop
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004852:	b480      	push	{r7}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b21      	cmp	r3, #33	@ 0x21
 8004864:	d13e      	bne.n	80048e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800486e:	d114      	bne.n	800489a <UART_Transmit_IT+0x48>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d110      	bne.n	800489a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800488c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	1c9a      	adds	r2, r3, #2
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	621a      	str	r2, [r3, #32]
 8004898:	e008      	b.n	80048ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6211      	str	r1, [r2, #32]
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4619      	mov	r1, r3
 80048ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10f      	bne.n	80048e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e000      	b.n	80048e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004908:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff fefc 	bl	8004710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b08c      	sub	sp, #48	@ 0x30
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b22      	cmp	r3, #34	@ 0x22
 8004934:	f040 80ae 	bne.w	8004a94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004940:	d117      	bne.n	8004972 <UART_Receive_IT+0x50>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d113      	bne.n	8004972 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004952:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	b29b      	uxth	r3, r3
 800495c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004960:	b29a      	uxth	r2, r3
 8004962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004964:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	1c9a      	adds	r2, r3, #2
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004970:	e026      	b.n	80049c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004978:	2300      	movs	r3, #0
 800497a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004984:	d007      	beq.n	8004996 <UART_Receive_IT+0x74>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <UART_Receive_IT+0x82>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e008      	b.n	80049b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4619      	mov	r1, r3
 80049ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d15d      	bne.n	8004a90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0220 	bic.w	r2, r2, #32
 80049e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d135      	bne.n	8004a86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f023 0310 	bic.w	r3, r3, #16
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a40:	623a      	str	r2, [r7, #32]
 8004a42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	69f9      	ldr	r1, [r7, #28]
 8004a46:	6a3a      	ldr	r2, [r7, #32]
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d10a      	bne.n	8004a78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff fe64 	bl	800474c <HAL_UARTEx_RxEventCallback>
 8004a84:	e002      	b.n	8004a8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff fe4c 	bl	8004724 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e002      	b.n	8004a96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e000      	b.n	8004a96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
  }
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3730      	adds	r7, #48	@ 0x30
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa4:	b0c0      	sub	sp, #256	@ 0x100
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004abc:	68d9      	ldr	r1, [r3, #12]
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	ea40 0301 	orr.w	r3, r0, r1
 8004ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004af8:	f021 010c 	bic.w	r1, r1, #12
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b06:	430b      	orrs	r3, r1
 8004b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1a:	6999      	ldr	r1, [r3, #24]
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	ea40 0301 	orr.w	r3, r0, r1
 8004b26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b8f      	ldr	r3, [pc, #572]	@ (8004d6c <UART_SetConfig+0x2cc>)
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d005      	beq.n	8004b40 <UART_SetConfig+0xa0>
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b8d      	ldr	r3, [pc, #564]	@ (8004d70 <UART_SetConfig+0x2d0>)
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d104      	bne.n	8004b4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7fe faa6 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 8004b44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b48:	e003      	b.n	8004b52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b4a:	f7fe fa8d 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8004b4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b5c:	f040 810c 	bne.w	8004d78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b72:	4622      	mov	r2, r4
 8004b74:	462b      	mov	r3, r5
 8004b76:	1891      	adds	r1, r2, r2
 8004b78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b7a:	415b      	adcs	r3, r3
 8004b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b82:	4621      	mov	r1, r4
 8004b84:	eb12 0801 	adds.w	r8, r2, r1
 8004b88:	4629      	mov	r1, r5
 8004b8a:	eb43 0901 	adc.w	r9, r3, r1
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ba2:	4690      	mov	r8, r2
 8004ba4:	4699      	mov	r9, r3
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	eb18 0303 	adds.w	r3, r8, r3
 8004bac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	eb49 0303 	adc.w	r3, r9, r3
 8004bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bce:	460b      	mov	r3, r1
 8004bd0:	18db      	adds	r3, r3, r3
 8004bd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	eb42 0303 	adc.w	r3, r2, r3
 8004bda:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004be0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004be4:	f7fb fb4c 	bl	8000280 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4b61      	ldr	r3, [pc, #388]	@ (8004d74 <UART_SetConfig+0x2d4>)
 8004bee:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	011c      	lsls	r4, r3, #4
 8004bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c08:	4642      	mov	r2, r8
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	1891      	adds	r1, r2, r2
 8004c0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c10:	415b      	adcs	r3, r3
 8004c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c18:	4641      	mov	r1, r8
 8004c1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c1e:	4649      	mov	r1, r9
 8004c20:	eb43 0b01 	adc.w	fp, r3, r1
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c38:	4692      	mov	sl, r2
 8004c3a:	469b      	mov	fp, r3
 8004c3c:	4643      	mov	r3, r8
 8004c3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c46:	464b      	mov	r3, r9
 8004c48:	eb4b 0303 	adc.w	r3, fp, r3
 8004c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c64:	460b      	mov	r3, r1
 8004c66:	18db      	adds	r3, r3, r3
 8004c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	eb42 0303 	adc.w	r3, r2, r3
 8004c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c7a:	f7fb fb01 	bl	8000280 <__aeabi_uldivmod>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	4b3b      	ldr	r3, [pc, #236]	@ (8004d74 <UART_SetConfig+0x2d4>)
 8004c86:	fba3 2301 	umull	r2, r3, r3, r1
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	2264      	movs	r2, #100	@ 0x64
 8004c8e:	fb02 f303 	mul.w	r3, r2, r3
 8004c92:	1acb      	subs	r3, r1, r3
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c9a:	4b36      	ldr	r3, [pc, #216]	@ (8004d74 <UART_SetConfig+0x2d4>)
 8004c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ca8:	441c      	add	r4, r3
 8004caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004cb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	1891      	adds	r1, r2, r2
 8004cc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004cc4:	415b      	adcs	r3, r3
 8004cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ccc:	4641      	mov	r1, r8
 8004cce:	1851      	adds	r1, r2, r1
 8004cd0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	414b      	adcs	r3, r1
 8004cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	00cb      	lsls	r3, r1, #3
 8004ce8:	4651      	mov	r1, sl
 8004cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cee:	4651      	mov	r1, sl
 8004cf0:	00ca      	lsls	r2, r1, #3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	189b      	adds	r3, r3, r2
 8004cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d00:	464b      	mov	r3, r9
 8004d02:	460a      	mov	r2, r1
 8004d04:	eb42 0303 	adc.w	r3, r2, r3
 8004d08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d20:	460b      	mov	r3, r1
 8004d22:	18db      	adds	r3, r3, r3
 8004d24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d26:	4613      	mov	r3, r2
 8004d28:	eb42 0303 	adc.w	r3, r2, r3
 8004d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d36:	f7fb faa3 	bl	8000280 <__aeabi_uldivmod>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d74 <UART_SetConfig+0x2d4>)
 8004d40:	fba3 1302 	umull	r1, r3, r3, r2
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	2164      	movs	r1, #100	@ 0x64
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	3332      	adds	r3, #50	@ 0x32
 8004d52:	4a08      	ldr	r2, [pc, #32]	@ (8004d74 <UART_SetConfig+0x2d4>)
 8004d54:	fba2 2303 	umull	r2, r3, r2, r3
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	f003 0207 	and.w	r2, r3, #7
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4422      	add	r2, r4
 8004d66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d68:	e106      	b.n	8004f78 <UART_SetConfig+0x4d8>
 8004d6a:	bf00      	nop
 8004d6c:	40011000 	.word	0x40011000
 8004d70:	40011400 	.word	0x40011400
 8004d74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d8a:	4642      	mov	r2, r8
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	1891      	adds	r1, r2, r2
 8004d90:	6239      	str	r1, [r7, #32]
 8004d92:	415b      	adcs	r3, r3
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d9a:	4641      	mov	r1, r8
 8004d9c:	1854      	adds	r4, r2, r1
 8004d9e:	4649      	mov	r1, r9
 8004da0:	eb43 0501 	adc.w	r5, r3, r1
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	00eb      	lsls	r3, r5, #3
 8004dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004db2:	00e2      	lsls	r2, r4, #3
 8004db4:	4614      	mov	r4, r2
 8004db6:	461d      	mov	r5, r3
 8004db8:	4643      	mov	r3, r8
 8004dba:	18e3      	adds	r3, r4, r3
 8004dbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	eb45 0303 	adc.w	r3, r5, r3
 8004dc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004de6:	4629      	mov	r1, r5
 8004de8:	008b      	lsls	r3, r1, #2
 8004dea:	4621      	mov	r1, r4
 8004dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004df0:	4621      	mov	r1, r4
 8004df2:	008a      	lsls	r2, r1, #2
 8004df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004df8:	f7fb fa42 	bl	8000280 <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4b60      	ldr	r3, [pc, #384]	@ (8004f84 <UART_SetConfig+0x4e4>)
 8004e02:	fba3 2302 	umull	r2, r3, r3, r2
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	011c      	lsls	r4, r3, #4
 8004e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	1891      	adds	r1, r2, r2
 8004e22:	61b9      	str	r1, [r7, #24]
 8004e24:	415b      	adcs	r3, r3
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	1851      	adds	r1, r2, r1
 8004e30:	6139      	str	r1, [r7, #16]
 8004e32:	4649      	mov	r1, r9
 8004e34:	414b      	adcs	r3, r1
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e44:	4659      	mov	r1, fp
 8004e46:	00cb      	lsls	r3, r1, #3
 8004e48:	4651      	mov	r1, sl
 8004e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e4e:	4651      	mov	r1, sl
 8004e50:	00ca      	lsls	r2, r1, #3
 8004e52:	4610      	mov	r0, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	4603      	mov	r3, r0
 8004e58:	4642      	mov	r2, r8
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e60:	464b      	mov	r3, r9
 8004e62:	460a      	mov	r2, r1
 8004e64:	eb42 0303 	adc.w	r3, r2, r3
 8004e68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e84:	4649      	mov	r1, r9
 8004e86:	008b      	lsls	r3, r1, #2
 8004e88:	4641      	mov	r1, r8
 8004e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e8e:	4641      	mov	r1, r8
 8004e90:	008a      	lsls	r2, r1, #2
 8004e92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e96:	f7fb f9f3 	bl	8000280 <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4b38      	ldr	r3, [pc, #224]	@ (8004f84 <UART_SetConfig+0x4e4>)
 8004ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2264      	movs	r2, #100	@ 0x64
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	1acb      	subs	r3, r1, r3
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	3332      	adds	r3, #50	@ 0x32
 8004eb4:	4a33      	ldr	r2, [pc, #204]	@ (8004f84 <UART_SetConfig+0x4e4>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ec0:	441c      	add	r4, r3
 8004ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004eca:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ecc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	1891      	adds	r1, r2, r2
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	415b      	adcs	r3, r3
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	1851      	adds	r1, r2, r1
 8004ee4:	6039      	str	r1, [r7, #0]
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	414b      	adcs	r3, r1
 8004eea:	607b      	str	r3, [r7, #4]
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ef8:	4659      	mov	r1, fp
 8004efa:	00cb      	lsls	r3, r1, #3
 8004efc:	4651      	mov	r1, sl
 8004efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f02:	4651      	mov	r1, sl
 8004f04:	00ca      	lsls	r2, r1, #3
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	189b      	adds	r3, r3, r2
 8004f10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f12:	464b      	mov	r3, r9
 8004f14:	460a      	mov	r2, r1
 8004f16:	eb42 0303 	adc.w	r3, r2, r3
 8004f1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f26:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f34:	4649      	mov	r1, r9
 8004f36:	008b      	lsls	r3, r1, #2
 8004f38:	4641      	mov	r1, r8
 8004f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f3e:	4641      	mov	r1, r8
 8004f40:	008a      	lsls	r2, r1, #2
 8004f42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f46:	f7fb f99b 	bl	8000280 <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <UART_SetConfig+0x4e4>)
 8004f50:	fba3 1302 	umull	r1, r3, r3, r2
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	2164      	movs	r1, #100	@ 0x64
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	3332      	adds	r3, #50	@ 0x32
 8004f62:	4a08      	ldr	r2, [pc, #32]	@ (8004f84 <UART_SetConfig+0x4e4>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f003 020f 	and.w	r2, r3, #15
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4422      	add	r2, r4
 8004f76:	609a      	str	r2, [r3, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f84:	51eb851f 	.word	0x51eb851f

08004f88 <siprintf>:
 8004f88:	b40e      	push	{r1, r2, r3}
 8004f8a:	b500      	push	{lr}
 8004f8c:	b09c      	sub	sp, #112	@ 0x70
 8004f8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004f90:	9002      	str	r0, [sp, #8]
 8004f92:	9006      	str	r0, [sp, #24]
 8004f94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004f98:	4809      	ldr	r0, [pc, #36]	@ (8004fc0 <siprintf+0x38>)
 8004f9a:	9107      	str	r1, [sp, #28]
 8004f9c:	9104      	str	r1, [sp, #16]
 8004f9e:	4909      	ldr	r1, [pc, #36]	@ (8004fc4 <siprintf+0x3c>)
 8004fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fa4:	9105      	str	r1, [sp, #20]
 8004fa6:	6800      	ldr	r0, [r0, #0]
 8004fa8:	9301      	str	r3, [sp, #4]
 8004faa:	a902      	add	r1, sp, #8
 8004fac:	f000 f994 	bl	80052d8 <_svfiprintf_r>
 8004fb0:	9b02      	ldr	r3, [sp, #8]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	701a      	strb	r2, [r3, #0]
 8004fb6:	b01c      	add	sp, #112	@ 0x70
 8004fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fbc:	b003      	add	sp, #12
 8004fbe:	4770      	bx	lr
 8004fc0:	20000010 	.word	0x20000010
 8004fc4:	ffff0208 	.word	0xffff0208

08004fc8 <memset>:
 8004fc8:	4402      	add	r2, r0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d100      	bne.n	8004fd2 <memset+0xa>
 8004fd0:	4770      	bx	lr
 8004fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fd6:	e7f9      	b.n	8004fcc <memset+0x4>

08004fd8 <__errno>:
 8004fd8:	4b01      	ldr	r3, [pc, #4]	@ (8004fe0 <__errno+0x8>)
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000010 	.word	0x20000010

08004fe4 <__libc_init_array>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800501c <__libc_init_array+0x38>)
 8004fe8:	4c0d      	ldr	r4, [pc, #52]	@ (8005020 <__libc_init_array+0x3c>)
 8004fea:	1b64      	subs	r4, r4, r5
 8004fec:	10a4      	asrs	r4, r4, #2
 8004fee:	2600      	movs	r6, #0
 8004ff0:	42a6      	cmp	r6, r4
 8004ff2:	d109      	bne.n	8005008 <__libc_init_array+0x24>
 8004ff4:	4d0b      	ldr	r5, [pc, #44]	@ (8005024 <__libc_init_array+0x40>)
 8004ff6:	4c0c      	ldr	r4, [pc, #48]	@ (8005028 <__libc_init_array+0x44>)
 8004ff8:	f000 fc66 	bl	80058c8 <_init>
 8004ffc:	1b64      	subs	r4, r4, r5
 8004ffe:	10a4      	asrs	r4, r4, #2
 8005000:	2600      	movs	r6, #0
 8005002:	42a6      	cmp	r6, r4
 8005004:	d105      	bne.n	8005012 <__libc_init_array+0x2e>
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	f855 3b04 	ldr.w	r3, [r5], #4
 800500c:	4798      	blx	r3
 800500e:	3601      	adds	r6, #1
 8005010:	e7ee      	b.n	8004ff0 <__libc_init_array+0xc>
 8005012:	f855 3b04 	ldr.w	r3, [r5], #4
 8005016:	4798      	blx	r3
 8005018:	3601      	adds	r6, #1
 800501a:	e7f2      	b.n	8005002 <__libc_init_array+0x1e>
 800501c:	080059a8 	.word	0x080059a8
 8005020:	080059a8 	.word	0x080059a8
 8005024:	080059a8 	.word	0x080059a8
 8005028:	080059ac 	.word	0x080059ac

0800502c <__retarget_lock_acquire_recursive>:
 800502c:	4770      	bx	lr

0800502e <__retarget_lock_release_recursive>:
 800502e:	4770      	bx	lr

08005030 <_free_r>:
 8005030:	b538      	push	{r3, r4, r5, lr}
 8005032:	4605      	mov	r5, r0
 8005034:	2900      	cmp	r1, #0
 8005036:	d041      	beq.n	80050bc <_free_r+0x8c>
 8005038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800503c:	1f0c      	subs	r4, r1, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	bfb8      	it	lt
 8005042:	18e4      	addlt	r4, r4, r3
 8005044:	f000 f8e0 	bl	8005208 <__malloc_lock>
 8005048:	4a1d      	ldr	r2, [pc, #116]	@ (80050c0 <_free_r+0x90>)
 800504a:	6813      	ldr	r3, [r2, #0]
 800504c:	b933      	cbnz	r3, 800505c <_free_r+0x2c>
 800504e:	6063      	str	r3, [r4, #4]
 8005050:	6014      	str	r4, [r2, #0]
 8005052:	4628      	mov	r0, r5
 8005054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005058:	f000 b8dc 	b.w	8005214 <__malloc_unlock>
 800505c:	42a3      	cmp	r3, r4
 800505e:	d908      	bls.n	8005072 <_free_r+0x42>
 8005060:	6820      	ldr	r0, [r4, #0]
 8005062:	1821      	adds	r1, r4, r0
 8005064:	428b      	cmp	r3, r1
 8005066:	bf01      	itttt	eq
 8005068:	6819      	ldreq	r1, [r3, #0]
 800506a:	685b      	ldreq	r3, [r3, #4]
 800506c:	1809      	addeq	r1, r1, r0
 800506e:	6021      	streq	r1, [r4, #0]
 8005070:	e7ed      	b.n	800504e <_free_r+0x1e>
 8005072:	461a      	mov	r2, r3
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	b10b      	cbz	r3, 800507c <_free_r+0x4c>
 8005078:	42a3      	cmp	r3, r4
 800507a:	d9fa      	bls.n	8005072 <_free_r+0x42>
 800507c:	6811      	ldr	r1, [r2, #0]
 800507e:	1850      	adds	r0, r2, r1
 8005080:	42a0      	cmp	r0, r4
 8005082:	d10b      	bne.n	800509c <_free_r+0x6c>
 8005084:	6820      	ldr	r0, [r4, #0]
 8005086:	4401      	add	r1, r0
 8005088:	1850      	adds	r0, r2, r1
 800508a:	4283      	cmp	r3, r0
 800508c:	6011      	str	r1, [r2, #0]
 800508e:	d1e0      	bne.n	8005052 <_free_r+0x22>
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	6053      	str	r3, [r2, #4]
 8005096:	4408      	add	r0, r1
 8005098:	6010      	str	r0, [r2, #0]
 800509a:	e7da      	b.n	8005052 <_free_r+0x22>
 800509c:	d902      	bls.n	80050a4 <_free_r+0x74>
 800509e:	230c      	movs	r3, #12
 80050a0:	602b      	str	r3, [r5, #0]
 80050a2:	e7d6      	b.n	8005052 <_free_r+0x22>
 80050a4:	6820      	ldr	r0, [r4, #0]
 80050a6:	1821      	adds	r1, r4, r0
 80050a8:	428b      	cmp	r3, r1
 80050aa:	bf04      	itt	eq
 80050ac:	6819      	ldreq	r1, [r3, #0]
 80050ae:	685b      	ldreq	r3, [r3, #4]
 80050b0:	6063      	str	r3, [r4, #4]
 80050b2:	bf04      	itt	eq
 80050b4:	1809      	addeq	r1, r1, r0
 80050b6:	6021      	streq	r1, [r4, #0]
 80050b8:	6054      	str	r4, [r2, #4]
 80050ba:	e7ca      	b.n	8005052 <_free_r+0x22>
 80050bc:	bd38      	pop	{r3, r4, r5, pc}
 80050be:	bf00      	nop
 80050c0:	20000344 	.word	0x20000344

080050c4 <sbrk_aligned>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	4e0f      	ldr	r6, [pc, #60]	@ (8005104 <sbrk_aligned+0x40>)
 80050c8:	460c      	mov	r4, r1
 80050ca:	6831      	ldr	r1, [r6, #0]
 80050cc:	4605      	mov	r5, r0
 80050ce:	b911      	cbnz	r1, 80050d6 <sbrk_aligned+0x12>
 80050d0:	f000 fba6 	bl	8005820 <_sbrk_r>
 80050d4:	6030      	str	r0, [r6, #0]
 80050d6:	4621      	mov	r1, r4
 80050d8:	4628      	mov	r0, r5
 80050da:	f000 fba1 	bl	8005820 <_sbrk_r>
 80050de:	1c43      	adds	r3, r0, #1
 80050e0:	d103      	bne.n	80050ea <sbrk_aligned+0x26>
 80050e2:	f04f 34ff 	mov.w	r4, #4294967295
 80050e6:	4620      	mov	r0, r4
 80050e8:	bd70      	pop	{r4, r5, r6, pc}
 80050ea:	1cc4      	adds	r4, r0, #3
 80050ec:	f024 0403 	bic.w	r4, r4, #3
 80050f0:	42a0      	cmp	r0, r4
 80050f2:	d0f8      	beq.n	80050e6 <sbrk_aligned+0x22>
 80050f4:	1a21      	subs	r1, r4, r0
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 fb92 	bl	8005820 <_sbrk_r>
 80050fc:	3001      	adds	r0, #1
 80050fe:	d1f2      	bne.n	80050e6 <sbrk_aligned+0x22>
 8005100:	e7ef      	b.n	80050e2 <sbrk_aligned+0x1e>
 8005102:	bf00      	nop
 8005104:	20000340 	.word	0x20000340

08005108 <_malloc_r>:
 8005108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800510c:	1ccd      	adds	r5, r1, #3
 800510e:	f025 0503 	bic.w	r5, r5, #3
 8005112:	3508      	adds	r5, #8
 8005114:	2d0c      	cmp	r5, #12
 8005116:	bf38      	it	cc
 8005118:	250c      	movcc	r5, #12
 800511a:	2d00      	cmp	r5, #0
 800511c:	4606      	mov	r6, r0
 800511e:	db01      	blt.n	8005124 <_malloc_r+0x1c>
 8005120:	42a9      	cmp	r1, r5
 8005122:	d904      	bls.n	800512e <_malloc_r+0x26>
 8005124:	230c      	movs	r3, #12
 8005126:	6033      	str	r3, [r6, #0]
 8005128:	2000      	movs	r0, #0
 800512a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800512e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005204 <_malloc_r+0xfc>
 8005132:	f000 f869 	bl	8005208 <__malloc_lock>
 8005136:	f8d8 3000 	ldr.w	r3, [r8]
 800513a:	461c      	mov	r4, r3
 800513c:	bb44      	cbnz	r4, 8005190 <_malloc_r+0x88>
 800513e:	4629      	mov	r1, r5
 8005140:	4630      	mov	r0, r6
 8005142:	f7ff ffbf 	bl	80050c4 <sbrk_aligned>
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	4604      	mov	r4, r0
 800514a:	d158      	bne.n	80051fe <_malloc_r+0xf6>
 800514c:	f8d8 4000 	ldr.w	r4, [r8]
 8005150:	4627      	mov	r7, r4
 8005152:	2f00      	cmp	r7, #0
 8005154:	d143      	bne.n	80051de <_malloc_r+0xd6>
 8005156:	2c00      	cmp	r4, #0
 8005158:	d04b      	beq.n	80051f2 <_malloc_r+0xea>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	4639      	mov	r1, r7
 800515e:	4630      	mov	r0, r6
 8005160:	eb04 0903 	add.w	r9, r4, r3
 8005164:	f000 fb5c 	bl	8005820 <_sbrk_r>
 8005168:	4581      	cmp	r9, r0
 800516a:	d142      	bne.n	80051f2 <_malloc_r+0xea>
 800516c:	6821      	ldr	r1, [r4, #0]
 800516e:	1a6d      	subs	r5, r5, r1
 8005170:	4629      	mov	r1, r5
 8005172:	4630      	mov	r0, r6
 8005174:	f7ff ffa6 	bl	80050c4 <sbrk_aligned>
 8005178:	3001      	adds	r0, #1
 800517a:	d03a      	beq.n	80051f2 <_malloc_r+0xea>
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	442b      	add	r3, r5
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	f8d8 3000 	ldr.w	r3, [r8]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	bb62      	cbnz	r2, 80051e4 <_malloc_r+0xdc>
 800518a:	f8c8 7000 	str.w	r7, [r8]
 800518e:	e00f      	b.n	80051b0 <_malloc_r+0xa8>
 8005190:	6822      	ldr	r2, [r4, #0]
 8005192:	1b52      	subs	r2, r2, r5
 8005194:	d420      	bmi.n	80051d8 <_malloc_r+0xd0>
 8005196:	2a0b      	cmp	r2, #11
 8005198:	d917      	bls.n	80051ca <_malloc_r+0xc2>
 800519a:	1961      	adds	r1, r4, r5
 800519c:	42a3      	cmp	r3, r4
 800519e:	6025      	str	r5, [r4, #0]
 80051a0:	bf18      	it	ne
 80051a2:	6059      	strne	r1, [r3, #4]
 80051a4:	6863      	ldr	r3, [r4, #4]
 80051a6:	bf08      	it	eq
 80051a8:	f8c8 1000 	streq.w	r1, [r8]
 80051ac:	5162      	str	r2, [r4, r5]
 80051ae:	604b      	str	r3, [r1, #4]
 80051b0:	4630      	mov	r0, r6
 80051b2:	f000 f82f 	bl	8005214 <__malloc_unlock>
 80051b6:	f104 000b 	add.w	r0, r4, #11
 80051ba:	1d23      	adds	r3, r4, #4
 80051bc:	f020 0007 	bic.w	r0, r0, #7
 80051c0:	1ac2      	subs	r2, r0, r3
 80051c2:	bf1c      	itt	ne
 80051c4:	1a1b      	subne	r3, r3, r0
 80051c6:	50a3      	strne	r3, [r4, r2]
 80051c8:	e7af      	b.n	800512a <_malloc_r+0x22>
 80051ca:	6862      	ldr	r2, [r4, #4]
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	bf0c      	ite	eq
 80051d0:	f8c8 2000 	streq.w	r2, [r8]
 80051d4:	605a      	strne	r2, [r3, #4]
 80051d6:	e7eb      	b.n	80051b0 <_malloc_r+0xa8>
 80051d8:	4623      	mov	r3, r4
 80051da:	6864      	ldr	r4, [r4, #4]
 80051dc:	e7ae      	b.n	800513c <_malloc_r+0x34>
 80051de:	463c      	mov	r4, r7
 80051e0:	687f      	ldr	r7, [r7, #4]
 80051e2:	e7b6      	b.n	8005152 <_malloc_r+0x4a>
 80051e4:	461a      	mov	r2, r3
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	d1fb      	bne.n	80051e4 <_malloc_r+0xdc>
 80051ec:	2300      	movs	r3, #0
 80051ee:	6053      	str	r3, [r2, #4]
 80051f0:	e7de      	b.n	80051b0 <_malloc_r+0xa8>
 80051f2:	230c      	movs	r3, #12
 80051f4:	6033      	str	r3, [r6, #0]
 80051f6:	4630      	mov	r0, r6
 80051f8:	f000 f80c 	bl	8005214 <__malloc_unlock>
 80051fc:	e794      	b.n	8005128 <_malloc_r+0x20>
 80051fe:	6005      	str	r5, [r0, #0]
 8005200:	e7d6      	b.n	80051b0 <_malloc_r+0xa8>
 8005202:	bf00      	nop
 8005204:	20000344 	.word	0x20000344

08005208 <__malloc_lock>:
 8005208:	4801      	ldr	r0, [pc, #4]	@ (8005210 <__malloc_lock+0x8>)
 800520a:	f7ff bf0f 	b.w	800502c <__retarget_lock_acquire_recursive>
 800520e:	bf00      	nop
 8005210:	2000033c 	.word	0x2000033c

08005214 <__malloc_unlock>:
 8005214:	4801      	ldr	r0, [pc, #4]	@ (800521c <__malloc_unlock+0x8>)
 8005216:	f7ff bf0a 	b.w	800502e <__retarget_lock_release_recursive>
 800521a:	bf00      	nop
 800521c:	2000033c 	.word	0x2000033c

08005220 <__ssputs_r>:
 8005220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005224:	688e      	ldr	r6, [r1, #8]
 8005226:	461f      	mov	r7, r3
 8005228:	42be      	cmp	r6, r7
 800522a:	680b      	ldr	r3, [r1, #0]
 800522c:	4682      	mov	sl, r0
 800522e:	460c      	mov	r4, r1
 8005230:	4690      	mov	r8, r2
 8005232:	d82d      	bhi.n	8005290 <__ssputs_r+0x70>
 8005234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005238:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800523c:	d026      	beq.n	800528c <__ssputs_r+0x6c>
 800523e:	6965      	ldr	r5, [r4, #20]
 8005240:	6909      	ldr	r1, [r1, #16]
 8005242:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005246:	eba3 0901 	sub.w	r9, r3, r1
 800524a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800524e:	1c7b      	adds	r3, r7, #1
 8005250:	444b      	add	r3, r9
 8005252:	106d      	asrs	r5, r5, #1
 8005254:	429d      	cmp	r5, r3
 8005256:	bf38      	it	cc
 8005258:	461d      	movcc	r5, r3
 800525a:	0553      	lsls	r3, r2, #21
 800525c:	d527      	bpl.n	80052ae <__ssputs_r+0x8e>
 800525e:	4629      	mov	r1, r5
 8005260:	f7ff ff52 	bl	8005108 <_malloc_r>
 8005264:	4606      	mov	r6, r0
 8005266:	b360      	cbz	r0, 80052c2 <__ssputs_r+0xa2>
 8005268:	6921      	ldr	r1, [r4, #16]
 800526a:	464a      	mov	r2, r9
 800526c:	f000 fae8 	bl	8005840 <memcpy>
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800527a:	81a3      	strh	r3, [r4, #12]
 800527c:	6126      	str	r6, [r4, #16]
 800527e:	6165      	str	r5, [r4, #20]
 8005280:	444e      	add	r6, r9
 8005282:	eba5 0509 	sub.w	r5, r5, r9
 8005286:	6026      	str	r6, [r4, #0]
 8005288:	60a5      	str	r5, [r4, #8]
 800528a:	463e      	mov	r6, r7
 800528c:	42be      	cmp	r6, r7
 800528e:	d900      	bls.n	8005292 <__ssputs_r+0x72>
 8005290:	463e      	mov	r6, r7
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	4632      	mov	r2, r6
 8005296:	4641      	mov	r1, r8
 8005298:	f000 faa8 	bl	80057ec <memmove>
 800529c:	68a3      	ldr	r3, [r4, #8]
 800529e:	1b9b      	subs	r3, r3, r6
 80052a0:	60a3      	str	r3, [r4, #8]
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	4433      	add	r3, r6
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	2000      	movs	r0, #0
 80052aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ae:	462a      	mov	r2, r5
 80052b0:	f000 fad4 	bl	800585c <_realloc_r>
 80052b4:	4606      	mov	r6, r0
 80052b6:	2800      	cmp	r0, #0
 80052b8:	d1e0      	bne.n	800527c <__ssputs_r+0x5c>
 80052ba:	6921      	ldr	r1, [r4, #16]
 80052bc:	4650      	mov	r0, sl
 80052be:	f7ff feb7 	bl	8005030 <_free_r>
 80052c2:	230c      	movs	r3, #12
 80052c4:	f8ca 3000 	str.w	r3, [sl]
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ce:	81a3      	strh	r3, [r4, #12]
 80052d0:	f04f 30ff 	mov.w	r0, #4294967295
 80052d4:	e7e9      	b.n	80052aa <__ssputs_r+0x8a>
	...

080052d8 <_svfiprintf_r>:
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052dc:	4698      	mov	r8, r3
 80052de:	898b      	ldrh	r3, [r1, #12]
 80052e0:	061b      	lsls	r3, r3, #24
 80052e2:	b09d      	sub	sp, #116	@ 0x74
 80052e4:	4607      	mov	r7, r0
 80052e6:	460d      	mov	r5, r1
 80052e8:	4614      	mov	r4, r2
 80052ea:	d510      	bpl.n	800530e <_svfiprintf_r+0x36>
 80052ec:	690b      	ldr	r3, [r1, #16]
 80052ee:	b973      	cbnz	r3, 800530e <_svfiprintf_r+0x36>
 80052f0:	2140      	movs	r1, #64	@ 0x40
 80052f2:	f7ff ff09 	bl	8005108 <_malloc_r>
 80052f6:	6028      	str	r0, [r5, #0]
 80052f8:	6128      	str	r0, [r5, #16]
 80052fa:	b930      	cbnz	r0, 800530a <_svfiprintf_r+0x32>
 80052fc:	230c      	movs	r3, #12
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	f04f 30ff 	mov.w	r0, #4294967295
 8005304:	b01d      	add	sp, #116	@ 0x74
 8005306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800530a:	2340      	movs	r3, #64	@ 0x40
 800530c:	616b      	str	r3, [r5, #20]
 800530e:	2300      	movs	r3, #0
 8005310:	9309      	str	r3, [sp, #36]	@ 0x24
 8005312:	2320      	movs	r3, #32
 8005314:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005318:	f8cd 800c 	str.w	r8, [sp, #12]
 800531c:	2330      	movs	r3, #48	@ 0x30
 800531e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054bc <_svfiprintf_r+0x1e4>
 8005322:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005326:	f04f 0901 	mov.w	r9, #1
 800532a:	4623      	mov	r3, r4
 800532c:	469a      	mov	sl, r3
 800532e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005332:	b10a      	cbz	r2, 8005338 <_svfiprintf_r+0x60>
 8005334:	2a25      	cmp	r2, #37	@ 0x25
 8005336:	d1f9      	bne.n	800532c <_svfiprintf_r+0x54>
 8005338:	ebba 0b04 	subs.w	fp, sl, r4
 800533c:	d00b      	beq.n	8005356 <_svfiprintf_r+0x7e>
 800533e:	465b      	mov	r3, fp
 8005340:	4622      	mov	r2, r4
 8005342:	4629      	mov	r1, r5
 8005344:	4638      	mov	r0, r7
 8005346:	f7ff ff6b 	bl	8005220 <__ssputs_r>
 800534a:	3001      	adds	r0, #1
 800534c:	f000 80a7 	beq.w	800549e <_svfiprintf_r+0x1c6>
 8005350:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005352:	445a      	add	r2, fp
 8005354:	9209      	str	r2, [sp, #36]	@ 0x24
 8005356:	f89a 3000 	ldrb.w	r3, [sl]
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 809f 	beq.w	800549e <_svfiprintf_r+0x1c6>
 8005360:	2300      	movs	r3, #0
 8005362:	f04f 32ff 	mov.w	r2, #4294967295
 8005366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800536a:	f10a 0a01 	add.w	sl, sl, #1
 800536e:	9304      	str	r3, [sp, #16]
 8005370:	9307      	str	r3, [sp, #28]
 8005372:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005376:	931a      	str	r3, [sp, #104]	@ 0x68
 8005378:	4654      	mov	r4, sl
 800537a:	2205      	movs	r2, #5
 800537c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005380:	484e      	ldr	r0, [pc, #312]	@ (80054bc <_svfiprintf_r+0x1e4>)
 8005382:	f7fa ff2d 	bl	80001e0 <memchr>
 8005386:	9a04      	ldr	r2, [sp, #16]
 8005388:	b9d8      	cbnz	r0, 80053c2 <_svfiprintf_r+0xea>
 800538a:	06d0      	lsls	r0, r2, #27
 800538c:	bf44      	itt	mi
 800538e:	2320      	movmi	r3, #32
 8005390:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005394:	0711      	lsls	r1, r2, #28
 8005396:	bf44      	itt	mi
 8005398:	232b      	movmi	r3, #43	@ 0x2b
 800539a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800539e:	f89a 3000 	ldrb.w	r3, [sl]
 80053a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80053a4:	d015      	beq.n	80053d2 <_svfiprintf_r+0xfa>
 80053a6:	9a07      	ldr	r2, [sp, #28]
 80053a8:	4654      	mov	r4, sl
 80053aa:	2000      	movs	r0, #0
 80053ac:	f04f 0c0a 	mov.w	ip, #10
 80053b0:	4621      	mov	r1, r4
 80053b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053b6:	3b30      	subs	r3, #48	@ 0x30
 80053b8:	2b09      	cmp	r3, #9
 80053ba:	d94b      	bls.n	8005454 <_svfiprintf_r+0x17c>
 80053bc:	b1b0      	cbz	r0, 80053ec <_svfiprintf_r+0x114>
 80053be:	9207      	str	r2, [sp, #28]
 80053c0:	e014      	b.n	80053ec <_svfiprintf_r+0x114>
 80053c2:	eba0 0308 	sub.w	r3, r0, r8
 80053c6:	fa09 f303 	lsl.w	r3, r9, r3
 80053ca:	4313      	orrs	r3, r2
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	46a2      	mov	sl, r4
 80053d0:	e7d2      	b.n	8005378 <_svfiprintf_r+0xa0>
 80053d2:	9b03      	ldr	r3, [sp, #12]
 80053d4:	1d19      	adds	r1, r3, #4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	9103      	str	r1, [sp, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bfbb      	ittet	lt
 80053de:	425b      	neglt	r3, r3
 80053e0:	f042 0202 	orrlt.w	r2, r2, #2
 80053e4:	9307      	strge	r3, [sp, #28]
 80053e6:	9307      	strlt	r3, [sp, #28]
 80053e8:	bfb8      	it	lt
 80053ea:	9204      	strlt	r2, [sp, #16]
 80053ec:	7823      	ldrb	r3, [r4, #0]
 80053ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80053f0:	d10a      	bne.n	8005408 <_svfiprintf_r+0x130>
 80053f2:	7863      	ldrb	r3, [r4, #1]
 80053f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80053f6:	d132      	bne.n	800545e <_svfiprintf_r+0x186>
 80053f8:	9b03      	ldr	r3, [sp, #12]
 80053fa:	1d1a      	adds	r2, r3, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	9203      	str	r2, [sp, #12]
 8005400:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005404:	3402      	adds	r4, #2
 8005406:	9305      	str	r3, [sp, #20]
 8005408:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80054cc <_svfiprintf_r+0x1f4>
 800540c:	7821      	ldrb	r1, [r4, #0]
 800540e:	2203      	movs	r2, #3
 8005410:	4650      	mov	r0, sl
 8005412:	f7fa fee5 	bl	80001e0 <memchr>
 8005416:	b138      	cbz	r0, 8005428 <_svfiprintf_r+0x150>
 8005418:	9b04      	ldr	r3, [sp, #16]
 800541a:	eba0 000a 	sub.w	r0, r0, sl
 800541e:	2240      	movs	r2, #64	@ 0x40
 8005420:	4082      	lsls	r2, r0
 8005422:	4313      	orrs	r3, r2
 8005424:	3401      	adds	r4, #1
 8005426:	9304      	str	r3, [sp, #16]
 8005428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800542c:	4824      	ldr	r0, [pc, #144]	@ (80054c0 <_svfiprintf_r+0x1e8>)
 800542e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005432:	2206      	movs	r2, #6
 8005434:	f7fa fed4 	bl	80001e0 <memchr>
 8005438:	2800      	cmp	r0, #0
 800543a:	d036      	beq.n	80054aa <_svfiprintf_r+0x1d2>
 800543c:	4b21      	ldr	r3, [pc, #132]	@ (80054c4 <_svfiprintf_r+0x1ec>)
 800543e:	bb1b      	cbnz	r3, 8005488 <_svfiprintf_r+0x1b0>
 8005440:	9b03      	ldr	r3, [sp, #12]
 8005442:	3307      	adds	r3, #7
 8005444:	f023 0307 	bic.w	r3, r3, #7
 8005448:	3308      	adds	r3, #8
 800544a:	9303      	str	r3, [sp, #12]
 800544c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800544e:	4433      	add	r3, r6
 8005450:	9309      	str	r3, [sp, #36]	@ 0x24
 8005452:	e76a      	b.n	800532a <_svfiprintf_r+0x52>
 8005454:	fb0c 3202 	mla	r2, ip, r2, r3
 8005458:	460c      	mov	r4, r1
 800545a:	2001      	movs	r0, #1
 800545c:	e7a8      	b.n	80053b0 <_svfiprintf_r+0xd8>
 800545e:	2300      	movs	r3, #0
 8005460:	3401      	adds	r4, #1
 8005462:	9305      	str	r3, [sp, #20]
 8005464:	4619      	mov	r1, r3
 8005466:	f04f 0c0a 	mov.w	ip, #10
 800546a:	4620      	mov	r0, r4
 800546c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005470:	3a30      	subs	r2, #48	@ 0x30
 8005472:	2a09      	cmp	r2, #9
 8005474:	d903      	bls.n	800547e <_svfiprintf_r+0x1a6>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0c6      	beq.n	8005408 <_svfiprintf_r+0x130>
 800547a:	9105      	str	r1, [sp, #20]
 800547c:	e7c4      	b.n	8005408 <_svfiprintf_r+0x130>
 800547e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005482:	4604      	mov	r4, r0
 8005484:	2301      	movs	r3, #1
 8005486:	e7f0      	b.n	800546a <_svfiprintf_r+0x192>
 8005488:	ab03      	add	r3, sp, #12
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	462a      	mov	r2, r5
 800548e:	4b0e      	ldr	r3, [pc, #56]	@ (80054c8 <_svfiprintf_r+0x1f0>)
 8005490:	a904      	add	r1, sp, #16
 8005492:	4638      	mov	r0, r7
 8005494:	f3af 8000 	nop.w
 8005498:	1c42      	adds	r2, r0, #1
 800549a:	4606      	mov	r6, r0
 800549c:	d1d6      	bne.n	800544c <_svfiprintf_r+0x174>
 800549e:	89ab      	ldrh	r3, [r5, #12]
 80054a0:	065b      	lsls	r3, r3, #25
 80054a2:	f53f af2d 	bmi.w	8005300 <_svfiprintf_r+0x28>
 80054a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054a8:	e72c      	b.n	8005304 <_svfiprintf_r+0x2c>
 80054aa:	ab03      	add	r3, sp, #12
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	462a      	mov	r2, r5
 80054b0:	4b05      	ldr	r3, [pc, #20]	@ (80054c8 <_svfiprintf_r+0x1f0>)
 80054b2:	a904      	add	r1, sp, #16
 80054b4:	4638      	mov	r0, r7
 80054b6:	f000 f879 	bl	80055ac <_printf_i>
 80054ba:	e7ed      	b.n	8005498 <_svfiprintf_r+0x1c0>
 80054bc:	0800596c 	.word	0x0800596c
 80054c0:	08005976 	.word	0x08005976
 80054c4:	00000000 	.word	0x00000000
 80054c8:	08005221 	.word	0x08005221
 80054cc:	08005972 	.word	0x08005972

080054d0 <_printf_common>:
 80054d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d4:	4616      	mov	r6, r2
 80054d6:	4698      	mov	r8, r3
 80054d8:	688a      	ldr	r2, [r1, #8]
 80054da:	690b      	ldr	r3, [r1, #16]
 80054dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054e0:	4293      	cmp	r3, r2
 80054e2:	bfb8      	it	lt
 80054e4:	4613      	movlt	r3, r2
 80054e6:	6033      	str	r3, [r6, #0]
 80054e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054ec:	4607      	mov	r7, r0
 80054ee:	460c      	mov	r4, r1
 80054f0:	b10a      	cbz	r2, 80054f6 <_printf_common+0x26>
 80054f2:	3301      	adds	r3, #1
 80054f4:	6033      	str	r3, [r6, #0]
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	0699      	lsls	r1, r3, #26
 80054fa:	bf42      	ittt	mi
 80054fc:	6833      	ldrmi	r3, [r6, #0]
 80054fe:	3302      	addmi	r3, #2
 8005500:	6033      	strmi	r3, [r6, #0]
 8005502:	6825      	ldr	r5, [r4, #0]
 8005504:	f015 0506 	ands.w	r5, r5, #6
 8005508:	d106      	bne.n	8005518 <_printf_common+0x48>
 800550a:	f104 0a19 	add.w	sl, r4, #25
 800550e:	68e3      	ldr	r3, [r4, #12]
 8005510:	6832      	ldr	r2, [r6, #0]
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	42ab      	cmp	r3, r5
 8005516:	dc26      	bgt.n	8005566 <_printf_common+0x96>
 8005518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800551c:	6822      	ldr	r2, [r4, #0]
 800551e:	3b00      	subs	r3, #0
 8005520:	bf18      	it	ne
 8005522:	2301      	movne	r3, #1
 8005524:	0692      	lsls	r2, r2, #26
 8005526:	d42b      	bmi.n	8005580 <_printf_common+0xb0>
 8005528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800552c:	4641      	mov	r1, r8
 800552e:	4638      	mov	r0, r7
 8005530:	47c8      	blx	r9
 8005532:	3001      	adds	r0, #1
 8005534:	d01e      	beq.n	8005574 <_printf_common+0xa4>
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	6922      	ldr	r2, [r4, #16]
 800553a:	f003 0306 	and.w	r3, r3, #6
 800553e:	2b04      	cmp	r3, #4
 8005540:	bf02      	ittt	eq
 8005542:	68e5      	ldreq	r5, [r4, #12]
 8005544:	6833      	ldreq	r3, [r6, #0]
 8005546:	1aed      	subeq	r5, r5, r3
 8005548:	68a3      	ldr	r3, [r4, #8]
 800554a:	bf0c      	ite	eq
 800554c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005550:	2500      	movne	r5, #0
 8005552:	4293      	cmp	r3, r2
 8005554:	bfc4      	itt	gt
 8005556:	1a9b      	subgt	r3, r3, r2
 8005558:	18ed      	addgt	r5, r5, r3
 800555a:	2600      	movs	r6, #0
 800555c:	341a      	adds	r4, #26
 800555e:	42b5      	cmp	r5, r6
 8005560:	d11a      	bne.n	8005598 <_printf_common+0xc8>
 8005562:	2000      	movs	r0, #0
 8005564:	e008      	b.n	8005578 <_printf_common+0xa8>
 8005566:	2301      	movs	r3, #1
 8005568:	4652      	mov	r2, sl
 800556a:	4641      	mov	r1, r8
 800556c:	4638      	mov	r0, r7
 800556e:	47c8      	blx	r9
 8005570:	3001      	adds	r0, #1
 8005572:	d103      	bne.n	800557c <_printf_common+0xac>
 8005574:	f04f 30ff 	mov.w	r0, #4294967295
 8005578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557c:	3501      	adds	r5, #1
 800557e:	e7c6      	b.n	800550e <_printf_common+0x3e>
 8005580:	18e1      	adds	r1, r4, r3
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	2030      	movs	r0, #48	@ 0x30
 8005586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800558a:	4422      	add	r2, r4
 800558c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005594:	3302      	adds	r3, #2
 8005596:	e7c7      	b.n	8005528 <_printf_common+0x58>
 8005598:	2301      	movs	r3, #1
 800559a:	4622      	mov	r2, r4
 800559c:	4641      	mov	r1, r8
 800559e:	4638      	mov	r0, r7
 80055a0:	47c8      	blx	r9
 80055a2:	3001      	adds	r0, #1
 80055a4:	d0e6      	beq.n	8005574 <_printf_common+0xa4>
 80055a6:	3601      	adds	r6, #1
 80055a8:	e7d9      	b.n	800555e <_printf_common+0x8e>
	...

080055ac <_printf_i>:
 80055ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055b0:	7e0f      	ldrb	r7, [r1, #24]
 80055b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055b4:	2f78      	cmp	r7, #120	@ 0x78
 80055b6:	4691      	mov	r9, r2
 80055b8:	4680      	mov	r8, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	469a      	mov	sl, r3
 80055be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055c2:	d807      	bhi.n	80055d4 <_printf_i+0x28>
 80055c4:	2f62      	cmp	r7, #98	@ 0x62
 80055c6:	d80a      	bhi.n	80055de <_printf_i+0x32>
 80055c8:	2f00      	cmp	r7, #0
 80055ca:	f000 80d2 	beq.w	8005772 <_printf_i+0x1c6>
 80055ce:	2f58      	cmp	r7, #88	@ 0x58
 80055d0:	f000 80b9 	beq.w	8005746 <_printf_i+0x19a>
 80055d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055dc:	e03a      	b.n	8005654 <_printf_i+0xa8>
 80055de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055e2:	2b15      	cmp	r3, #21
 80055e4:	d8f6      	bhi.n	80055d4 <_printf_i+0x28>
 80055e6:	a101      	add	r1, pc, #4	@ (adr r1, 80055ec <_printf_i+0x40>)
 80055e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055ec:	08005645 	.word	0x08005645
 80055f0:	08005659 	.word	0x08005659
 80055f4:	080055d5 	.word	0x080055d5
 80055f8:	080055d5 	.word	0x080055d5
 80055fc:	080055d5 	.word	0x080055d5
 8005600:	080055d5 	.word	0x080055d5
 8005604:	08005659 	.word	0x08005659
 8005608:	080055d5 	.word	0x080055d5
 800560c:	080055d5 	.word	0x080055d5
 8005610:	080055d5 	.word	0x080055d5
 8005614:	080055d5 	.word	0x080055d5
 8005618:	08005759 	.word	0x08005759
 800561c:	08005683 	.word	0x08005683
 8005620:	08005713 	.word	0x08005713
 8005624:	080055d5 	.word	0x080055d5
 8005628:	080055d5 	.word	0x080055d5
 800562c:	0800577b 	.word	0x0800577b
 8005630:	080055d5 	.word	0x080055d5
 8005634:	08005683 	.word	0x08005683
 8005638:	080055d5 	.word	0x080055d5
 800563c:	080055d5 	.word	0x080055d5
 8005640:	0800571b 	.word	0x0800571b
 8005644:	6833      	ldr	r3, [r6, #0]
 8005646:	1d1a      	adds	r2, r3, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6032      	str	r2, [r6, #0]
 800564c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005654:	2301      	movs	r3, #1
 8005656:	e09d      	b.n	8005794 <_printf_i+0x1e8>
 8005658:	6833      	ldr	r3, [r6, #0]
 800565a:	6820      	ldr	r0, [r4, #0]
 800565c:	1d19      	adds	r1, r3, #4
 800565e:	6031      	str	r1, [r6, #0]
 8005660:	0606      	lsls	r6, r0, #24
 8005662:	d501      	bpl.n	8005668 <_printf_i+0xbc>
 8005664:	681d      	ldr	r5, [r3, #0]
 8005666:	e003      	b.n	8005670 <_printf_i+0xc4>
 8005668:	0645      	lsls	r5, r0, #25
 800566a:	d5fb      	bpl.n	8005664 <_printf_i+0xb8>
 800566c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005670:	2d00      	cmp	r5, #0
 8005672:	da03      	bge.n	800567c <_printf_i+0xd0>
 8005674:	232d      	movs	r3, #45	@ 0x2d
 8005676:	426d      	negs	r5, r5
 8005678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800567c:	4859      	ldr	r0, [pc, #356]	@ (80057e4 <_printf_i+0x238>)
 800567e:	230a      	movs	r3, #10
 8005680:	e011      	b.n	80056a6 <_printf_i+0xfa>
 8005682:	6821      	ldr	r1, [r4, #0]
 8005684:	6833      	ldr	r3, [r6, #0]
 8005686:	0608      	lsls	r0, r1, #24
 8005688:	f853 5b04 	ldr.w	r5, [r3], #4
 800568c:	d402      	bmi.n	8005694 <_printf_i+0xe8>
 800568e:	0649      	lsls	r1, r1, #25
 8005690:	bf48      	it	mi
 8005692:	b2ad      	uxthmi	r5, r5
 8005694:	2f6f      	cmp	r7, #111	@ 0x6f
 8005696:	4853      	ldr	r0, [pc, #332]	@ (80057e4 <_printf_i+0x238>)
 8005698:	6033      	str	r3, [r6, #0]
 800569a:	bf14      	ite	ne
 800569c:	230a      	movne	r3, #10
 800569e:	2308      	moveq	r3, #8
 80056a0:	2100      	movs	r1, #0
 80056a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056a6:	6866      	ldr	r6, [r4, #4]
 80056a8:	60a6      	str	r6, [r4, #8]
 80056aa:	2e00      	cmp	r6, #0
 80056ac:	bfa2      	ittt	ge
 80056ae:	6821      	ldrge	r1, [r4, #0]
 80056b0:	f021 0104 	bicge.w	r1, r1, #4
 80056b4:	6021      	strge	r1, [r4, #0]
 80056b6:	b90d      	cbnz	r5, 80056bc <_printf_i+0x110>
 80056b8:	2e00      	cmp	r6, #0
 80056ba:	d04b      	beq.n	8005754 <_printf_i+0x1a8>
 80056bc:	4616      	mov	r6, r2
 80056be:	fbb5 f1f3 	udiv	r1, r5, r3
 80056c2:	fb03 5711 	mls	r7, r3, r1, r5
 80056c6:	5dc7      	ldrb	r7, [r0, r7]
 80056c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056cc:	462f      	mov	r7, r5
 80056ce:	42bb      	cmp	r3, r7
 80056d0:	460d      	mov	r5, r1
 80056d2:	d9f4      	bls.n	80056be <_printf_i+0x112>
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d10b      	bne.n	80056f0 <_printf_i+0x144>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	07df      	lsls	r7, r3, #31
 80056dc:	d508      	bpl.n	80056f0 <_printf_i+0x144>
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	6861      	ldr	r1, [r4, #4]
 80056e2:	4299      	cmp	r1, r3
 80056e4:	bfde      	ittt	le
 80056e6:	2330      	movle	r3, #48	@ 0x30
 80056e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056f0:	1b92      	subs	r2, r2, r6
 80056f2:	6122      	str	r2, [r4, #16]
 80056f4:	f8cd a000 	str.w	sl, [sp]
 80056f8:	464b      	mov	r3, r9
 80056fa:	aa03      	add	r2, sp, #12
 80056fc:	4621      	mov	r1, r4
 80056fe:	4640      	mov	r0, r8
 8005700:	f7ff fee6 	bl	80054d0 <_printf_common>
 8005704:	3001      	adds	r0, #1
 8005706:	d14a      	bne.n	800579e <_printf_i+0x1f2>
 8005708:	f04f 30ff 	mov.w	r0, #4294967295
 800570c:	b004      	add	sp, #16
 800570e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	f043 0320 	orr.w	r3, r3, #32
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	4833      	ldr	r0, [pc, #204]	@ (80057e8 <_printf_i+0x23c>)
 800571c:	2778      	movs	r7, #120	@ 0x78
 800571e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	6831      	ldr	r1, [r6, #0]
 8005726:	061f      	lsls	r7, r3, #24
 8005728:	f851 5b04 	ldr.w	r5, [r1], #4
 800572c:	d402      	bmi.n	8005734 <_printf_i+0x188>
 800572e:	065f      	lsls	r7, r3, #25
 8005730:	bf48      	it	mi
 8005732:	b2ad      	uxthmi	r5, r5
 8005734:	6031      	str	r1, [r6, #0]
 8005736:	07d9      	lsls	r1, r3, #31
 8005738:	bf44      	itt	mi
 800573a:	f043 0320 	orrmi.w	r3, r3, #32
 800573e:	6023      	strmi	r3, [r4, #0]
 8005740:	b11d      	cbz	r5, 800574a <_printf_i+0x19e>
 8005742:	2310      	movs	r3, #16
 8005744:	e7ac      	b.n	80056a0 <_printf_i+0xf4>
 8005746:	4827      	ldr	r0, [pc, #156]	@ (80057e4 <_printf_i+0x238>)
 8005748:	e7e9      	b.n	800571e <_printf_i+0x172>
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	f023 0320 	bic.w	r3, r3, #32
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	e7f6      	b.n	8005742 <_printf_i+0x196>
 8005754:	4616      	mov	r6, r2
 8005756:	e7bd      	b.n	80056d4 <_printf_i+0x128>
 8005758:	6833      	ldr	r3, [r6, #0]
 800575a:	6825      	ldr	r5, [r4, #0]
 800575c:	6961      	ldr	r1, [r4, #20]
 800575e:	1d18      	adds	r0, r3, #4
 8005760:	6030      	str	r0, [r6, #0]
 8005762:	062e      	lsls	r6, r5, #24
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	d501      	bpl.n	800576c <_printf_i+0x1c0>
 8005768:	6019      	str	r1, [r3, #0]
 800576a:	e002      	b.n	8005772 <_printf_i+0x1c6>
 800576c:	0668      	lsls	r0, r5, #25
 800576e:	d5fb      	bpl.n	8005768 <_printf_i+0x1bc>
 8005770:	8019      	strh	r1, [r3, #0]
 8005772:	2300      	movs	r3, #0
 8005774:	6123      	str	r3, [r4, #16]
 8005776:	4616      	mov	r6, r2
 8005778:	e7bc      	b.n	80056f4 <_printf_i+0x148>
 800577a:	6833      	ldr	r3, [r6, #0]
 800577c:	1d1a      	adds	r2, r3, #4
 800577e:	6032      	str	r2, [r6, #0]
 8005780:	681e      	ldr	r6, [r3, #0]
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	2100      	movs	r1, #0
 8005786:	4630      	mov	r0, r6
 8005788:	f7fa fd2a 	bl	80001e0 <memchr>
 800578c:	b108      	cbz	r0, 8005792 <_printf_i+0x1e6>
 800578e:	1b80      	subs	r0, r0, r6
 8005790:	6060      	str	r0, [r4, #4]
 8005792:	6863      	ldr	r3, [r4, #4]
 8005794:	6123      	str	r3, [r4, #16]
 8005796:	2300      	movs	r3, #0
 8005798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800579c:	e7aa      	b.n	80056f4 <_printf_i+0x148>
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	4632      	mov	r2, r6
 80057a2:	4649      	mov	r1, r9
 80057a4:	4640      	mov	r0, r8
 80057a6:	47d0      	blx	sl
 80057a8:	3001      	adds	r0, #1
 80057aa:	d0ad      	beq.n	8005708 <_printf_i+0x15c>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	079b      	lsls	r3, r3, #30
 80057b0:	d413      	bmi.n	80057da <_printf_i+0x22e>
 80057b2:	68e0      	ldr	r0, [r4, #12]
 80057b4:	9b03      	ldr	r3, [sp, #12]
 80057b6:	4298      	cmp	r0, r3
 80057b8:	bfb8      	it	lt
 80057ba:	4618      	movlt	r0, r3
 80057bc:	e7a6      	b.n	800570c <_printf_i+0x160>
 80057be:	2301      	movs	r3, #1
 80057c0:	4632      	mov	r2, r6
 80057c2:	4649      	mov	r1, r9
 80057c4:	4640      	mov	r0, r8
 80057c6:	47d0      	blx	sl
 80057c8:	3001      	adds	r0, #1
 80057ca:	d09d      	beq.n	8005708 <_printf_i+0x15c>
 80057cc:	3501      	adds	r5, #1
 80057ce:	68e3      	ldr	r3, [r4, #12]
 80057d0:	9903      	ldr	r1, [sp, #12]
 80057d2:	1a5b      	subs	r3, r3, r1
 80057d4:	42ab      	cmp	r3, r5
 80057d6:	dcf2      	bgt.n	80057be <_printf_i+0x212>
 80057d8:	e7eb      	b.n	80057b2 <_printf_i+0x206>
 80057da:	2500      	movs	r5, #0
 80057dc:	f104 0619 	add.w	r6, r4, #25
 80057e0:	e7f5      	b.n	80057ce <_printf_i+0x222>
 80057e2:	bf00      	nop
 80057e4:	0800597d 	.word	0x0800597d
 80057e8:	0800598e 	.word	0x0800598e

080057ec <memmove>:
 80057ec:	4288      	cmp	r0, r1
 80057ee:	b510      	push	{r4, lr}
 80057f0:	eb01 0402 	add.w	r4, r1, r2
 80057f4:	d902      	bls.n	80057fc <memmove+0x10>
 80057f6:	4284      	cmp	r4, r0
 80057f8:	4623      	mov	r3, r4
 80057fa:	d807      	bhi.n	800580c <memmove+0x20>
 80057fc:	1e43      	subs	r3, r0, #1
 80057fe:	42a1      	cmp	r1, r4
 8005800:	d008      	beq.n	8005814 <memmove+0x28>
 8005802:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800580a:	e7f8      	b.n	80057fe <memmove+0x12>
 800580c:	4402      	add	r2, r0
 800580e:	4601      	mov	r1, r0
 8005810:	428a      	cmp	r2, r1
 8005812:	d100      	bne.n	8005816 <memmove+0x2a>
 8005814:	bd10      	pop	{r4, pc}
 8005816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800581a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800581e:	e7f7      	b.n	8005810 <memmove+0x24>

08005820 <_sbrk_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d06      	ldr	r5, [pc, #24]	@ (800583c <_sbrk_r+0x1c>)
 8005824:	2300      	movs	r3, #0
 8005826:	4604      	mov	r4, r0
 8005828:	4608      	mov	r0, r1
 800582a:	602b      	str	r3, [r5, #0]
 800582c:	f7fb fbec 	bl	8001008 <_sbrk>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_sbrk_r+0x1a>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	b103      	cbz	r3, 800583a <_sbrk_r+0x1a>
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	20000338 	.word	0x20000338

08005840 <memcpy>:
 8005840:	440a      	add	r2, r1
 8005842:	4291      	cmp	r1, r2
 8005844:	f100 33ff 	add.w	r3, r0, #4294967295
 8005848:	d100      	bne.n	800584c <memcpy+0xc>
 800584a:	4770      	bx	lr
 800584c:	b510      	push	{r4, lr}
 800584e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005856:	4291      	cmp	r1, r2
 8005858:	d1f9      	bne.n	800584e <memcpy+0xe>
 800585a:	bd10      	pop	{r4, pc}

0800585c <_realloc_r>:
 800585c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005860:	4680      	mov	r8, r0
 8005862:	4615      	mov	r5, r2
 8005864:	460c      	mov	r4, r1
 8005866:	b921      	cbnz	r1, 8005872 <_realloc_r+0x16>
 8005868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800586c:	4611      	mov	r1, r2
 800586e:	f7ff bc4b 	b.w	8005108 <_malloc_r>
 8005872:	b92a      	cbnz	r2, 8005880 <_realloc_r+0x24>
 8005874:	f7ff fbdc 	bl	8005030 <_free_r>
 8005878:	2400      	movs	r4, #0
 800587a:	4620      	mov	r0, r4
 800587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005880:	f000 f81a 	bl	80058b8 <_malloc_usable_size_r>
 8005884:	4285      	cmp	r5, r0
 8005886:	4606      	mov	r6, r0
 8005888:	d802      	bhi.n	8005890 <_realloc_r+0x34>
 800588a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800588e:	d8f4      	bhi.n	800587a <_realloc_r+0x1e>
 8005890:	4629      	mov	r1, r5
 8005892:	4640      	mov	r0, r8
 8005894:	f7ff fc38 	bl	8005108 <_malloc_r>
 8005898:	4607      	mov	r7, r0
 800589a:	2800      	cmp	r0, #0
 800589c:	d0ec      	beq.n	8005878 <_realloc_r+0x1c>
 800589e:	42b5      	cmp	r5, r6
 80058a0:	462a      	mov	r2, r5
 80058a2:	4621      	mov	r1, r4
 80058a4:	bf28      	it	cs
 80058a6:	4632      	movcs	r2, r6
 80058a8:	f7ff ffca 	bl	8005840 <memcpy>
 80058ac:	4621      	mov	r1, r4
 80058ae:	4640      	mov	r0, r8
 80058b0:	f7ff fbbe 	bl	8005030 <_free_r>
 80058b4:	463c      	mov	r4, r7
 80058b6:	e7e0      	b.n	800587a <_realloc_r+0x1e>

080058b8 <_malloc_usable_size_r>:
 80058b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058bc:	1f18      	subs	r0, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	bfbc      	itt	lt
 80058c2:	580b      	ldrlt	r3, [r1, r0]
 80058c4:	18c0      	addlt	r0, r0, r3
 80058c6:	4770      	bx	lr

080058c8 <_init>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr

080058d4 <_fini>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	bf00      	nop
 80058d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	469e      	mov	lr, r3
 80058de:	4770      	bx	lr
